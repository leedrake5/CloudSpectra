runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="cloudCal")
install.packages("shinyIncubator")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCore")
x <- c(1, 2, 3)
y <- c(4, 5, 6)
z <- c(7, 8, 9)
xy.frame <- data.frame(x, y)
xz.frame <- data.frame(x, z)
xy.frame + xz.frame
xy.frame[match(xy.frame$x, xz.frame$x), ] <- xz.frame
xy.frame
test <- xy.frame[match(xy.frame$x, xz.frame$x), ] <- xz.frame
test
pd.concat(xy.frame[:,:3], xy.frame, axis=1)
pd.concat(xy.frame, xy.frame, axis=1)
xy.frame <- xz.frame
xy.frame
xy.frame <- data.frame(x, y)
xy.frame.ioc <- xz.frame
xy.frame.ioc
xy.frame.ioc = xz.frame
xy.frame.ioc
xy.frame.ioc[:, 2] = xz.frame
xy.frame <- data.frame(c(0, 0, 0), y)
colnames(xy.frame) <- c("x", "y")
xy.frame
xz.frame
xy.frame["x"] <- xz.frame["x"]
xy.frame
apply("x", 2, function(x) xy.frame["x"] <- xz.frame["x"])
apply("x", 1, function(x) xy.frame["x"] <- xz.frame["x"])
runApp("~/GitHub/CloudCal")
xy.frame
xy.frame[!"x"]
xy.frame[!("x")]
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCore")
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
lsframe <- data.frame("data", 7000)
lsframe
colnames(lsframe) <- c("Value", "Number")
lsframe
lsframe$Number <- 1
lsframe
colnames(lsframe) <- c("Value", "Number")
runApp("~/GitHub/CloudCal")
madeup.frame$thing <- rep(1, 10)
runApp("~/GitHub/CloudCal")
xy.frame
x <- c(1, 2, 3)
y<- c(4, 5, 6)
xy.frame <- data.frame(x, y)
sum(xy.rame)
sum(xy.frame)
apply(xy.frame, 1, sum)
apply(xy.frame, 2, sum)
?rosums
?rowsums
?rowsum
rowsum(xy.frame)
xy.frame$z <- c(6, 7, 8)
xy.frame
rowsum(xy.frame, group="x")
x
rowSums(xy.frame)
sumr.frame <- data.frame(c("b", "c", "d"), xy.frame)
rowSums(xy.frame)
rowSums(sumr.frame)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
x <- c(1, 2,  )
x <- c(1, 2,  "")
x
y <- c(3, 4, 5)
xy.frame <- data.frame(x, y)
xy.frame
xy.frame[rowSums(is.na(xy.frame)) != ncol(xy.frame),]
xy.frame[rowSums(is.na(xy.frame)) == 0,]
xy.frame[complete.cases(xy.frame),]
xy.frame[!(is.na(xy.frame) | xy.frame ==""), ]
xy.frame[xy.frame==""] <- NA
xy.rame
xy.frame
foo <- na.omit(xy.frame)
foo
runApp("~/GitHub/CloudCal")
xy.test <- xy.frame[xy.frame==""] <- NA
xy.test
xy.frame
runApp("~/GitHub/CloudCal")
xy.frame
runApp("~/GitHub/CloudCal")
x
y
xy.frame <- data.frame(x, y)
xy.frame
xy.frame[xy.frame==""] <- NA
xy.frame
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("source('~/GitHub/CloudCal/server.R', chdir = TRUE)")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/Cezanne")
x <- "Ca"
y <- "K.alpha"
paste(x, ".", y, sep="")
runApp("~/GitHub/Cezanne")
runApp("~/GitHub/CloudCal")
intall.github("AnalytixWare/ShinySky")
library(devtools)
intall.github("AnalytixWare/ShinySky")
install_github("AnalytixWare/ShinySky")
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", "xrf-calibrate")
deployApp("~/GitHub/CloudCal", "CloudCal")
deployApp("~/GitHub/CloudCal", appName="CloudCal")
deployApp("~/GitHub/CloudCal", "CloudCal")
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
?fileInput
runApp("~/GitHub/CloudCal")
library(Cairo)
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCore")
library(shiny)
runApp("~/GitHub/CloudCore")
x <- c(1, 2, 3)
y <- 4, 5, 6
y <- c(4, 5, 6)
names <-c("bob", "nancy", "drew")
data.frame(names, x, y)
xy.frame <- data.frame(names, x, y)
xy.frmae[c("names 'x', "y"")]
xy.frmae[c("names",'x', "y"")]
)
"
xy.frmae[c("names","x", "y")]
xy.frame[c("names","x", "y")]
library(shiny)
?splitLayout
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
?isNull
?is.null
runApp("~/GitHub/CloudCal")
x <- 1
is.null(x)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
load("~/Desktop/testRowExclude.quant")
Calibration$calList[["Ca.K.alpha"]][[1]][[4]]
Calibration$calList[[input$calcurveelement]][[1]]$CalTable$CalType
Calibration$calList[["Ca.K.alpha"]][[1]]$CalTable$CalType
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
?hold
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
poly
runApp("~/GitHub/CloudCal")
library(shiny)
runApp("~/GitHub/CloudCal")
library(rsconnect)
deployApp("~/GitHub/CloudCal", appName="cloudCal")
x <- c(1, 2, 3)
y <- c(4, 5, 6)
xy.lm <- lm(x~y)
xy.lm$.fitted
summary(xy.lm)
xy.lm
ls(xy.lm)
xy.lm$residuals
library(broom)
tidy(xy.lm)
head(augment(xy.lm))
runApp("~/GitHub/CloudCal")
augmented(xy.frame)
augment(xy.frame)
augment(xy.lm)
library(purrr)
possibly(xy.lm)
?possibly
xy.lm.frame <- augment(xy.lm)
is.data.frame(xy.lm.frame)
xy.lm.frame
xy.lm.frame$.fitted
runApp("~/GitHub/CloudCal")
xy.lm.frame
runApp("~/GitHub/CloudCal")
?nearPoints
library(shiny)
runApp("~/GitHub/CloudCal")
runApp("~/GitHub/CloudCore")
library(ggplot2)#
#
data <- read.csv(file="~/Desktop/Tracer Comparison Study/Obsidian All Data Sources/Core 5-Table 1.csv")#
#
group.plot <- ggplot(data=data) +#
geom_point(aes(Rb, Zr, colour= Analysis, shape= Analysis)) +#
theme_light()#
#
boxplot.plot.nb <- ggplot(data=data, aes(y=Nb.dev, x=Analysis), alpha=0) +#
stat_boxplot(size=0.75, alpha=0.5) +#
geom_point(position=position_jitter(w=0.05, h=0), alpha=0.2) +#
scale_y_continuous("Nb Deviation (ppm)") +#
stat_summary(fun.y=mean, geom="point", shape=18, size=6, aes(colour= Analysis), alpha=0.8) +#
theme_light()#
#
boxplot.plot.zr <- ggplot(data=data, aes(y=Zr.dev, x=Analysis), alpha=0) +#
stat_boxplot(size=0.75, alpha=0.5) +#
geom_point(position=position_jitter(w=0.05, h=0), alpha=0.2) +#
scale_y_continuous("Zr Deviation (ppm)") +#
stat_summary(fun.y=mean, geom="point", shape=18, size=6, aes(colour= Analysis), alpha=0.8) +#
theme_light()#
#
boxplot.plot.y <- ggplot(data=data, aes(y=Y.dev, x=Analysis), alpha=0) +#
stat_boxplot(size=0.75, alpha=0.5) +#
geom_point(position=position_jitter(w=0.05, h=0), alpha=0.2) +#
scale_y_continuous("Y Deviation (ppm)") +#
stat_summary(fun.y=mean, geom="point", shape=18, size=6, aes(colour= Analysis), alpha=0.8) +#
theme_light()#
#
boxplot.plot.sr <- ggplot(data=data, aes(y=Sr.dev, x=Analysis), alpha=0) +#
stat_boxplot(size=0.75, alpha=0.5) +#
geom_point(position=position_jitter(w=0.05, h=0), alpha=0.2) +#
scale_y_continuous("Sr Deviation (ppm)") +#
stat_summary(fun.y=mean, geom="point", shape=18, size=6, aes(colour= Analysis), alpha=0.8) +#
theme_light()#
#
boxplot.plot.rb <- ggplot(data=data, aes(y=Rb.dev, x=Analysis), alpha=0) +#
stat_boxplot(size=0.75, alpha=0.5) +#
geom_point(position=position_jitter(w=0.05, h=0), alpha=0.2) +#
scale_y_continuous("Rb Deviation (ppm)") +#
stat_summary(fun.y=mean, geom="point", shape=18, size=6, aes(colour= Analysis), alpha=0.8) +#
theme_light()
ggsave(boxplot.plot.nb, file="~/Desktop/Tracer Comparison Study/boxNbDev.jpeg", width=1000, height=740)
ggsave(boxplot.plot.nb, file="~/Desktop/Tracer Comparison Study/boxNbDev.jpeg", width=10, height=7.4)
ggsave(boxplot.plot.nb, file="~/Desktop/Tracer Comparison Study/boxNbDev.jpeg", width=10, height=7.4)#
ggsave(boxplot.plot.zr, file="~/Desktop/Tracer Comparison Study/boxZrDev.jpeg", width=10, height=7.4)#
ggsave(boxplot.plot.y, file="~/Desktop/Tracer Comparison Study/boxYDev.jpeg", width=10, height=7.4)#
ggsave(boxplot.plot.sr, file="~/Desktop/Tracer Comparison Study/boxSrDev.jpeg", width=10, height=7.4)#
ggsave(boxplot.plot.rb, file="~/Desktop/Tracer Comparison Study/boxRbDev.jpeg", width=10, height=7.4)
library(shiny)
runApp("~/GitHub/xrf-app")
