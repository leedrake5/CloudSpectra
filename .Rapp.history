mapGenHeatDualDensity <- function(map, human.date, megafauna.date, human.sigma, megafauna.sigma, xmin, xmax, human.lat, human.long, megafauna.lat, megafauna.long, interval, x.res, y.res, land.file, lat.min, lat.max, long.min, long.max, frame.width, frame.height) {#
    stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
        date <- c(date, 100)#
        sigma <- c(sigma, 50)#
        lat <- c(lat, 0)#
        long <- c(long, 0)#
        date.frame <- data.frame(date, sigma, lat, long)#
        names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
        date.frame <- date.frame[complete.cases(date.frame),]#
        date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
        ids.cus = paste("Date", 1:length(date.sub$Date), sep = "")#
        coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
        names(coord.sub) <- c(".id", "Lat", "Long")#
        samp.intcal <- rep("intcal13", length(date.sub$Date))#
        samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
        samp.ages <- ldply(samp.slugdens, data.frame)#
        samp.ages <- subset(samp.ages, samp.ages$densities > .0015)#
        samp.test <- merge(x=samp.ages, y=coord.sub, by.x=".id", by.y=".id")#
        samp.test$DensityScale <- reshape::rescaler.default(samp.test$densities, type = "range")#
        return(samp.test)#
    }#
    land <- readOGR(land.file)#
    list_of_Lines <- slot(land, "lines")#
    land2 <-  SpatialPolygons(lapply(list_of_Lines, function(x) {#
        Polygons(list(Polygon(slot(slot(x, "Lines")[[1]], "coords"))),#
        ID=slot(x, "ID"))#
    }),#
    proj4string=CRS("+proj=longlat +ellps=WGS84"))#
    landset <- SpatialLines2PolySet(land)#
    polyland <- PolySet2SpatialPolygons(landset)#
    human.calibrated.date.frame <- stack.14C.4D(date=human.date, sigma=human.sigma, xmin=xmin, xmax=xmax, lat=human.lat, long=human.long)#
    #human.calibrated.date.frame <- subset(human.calibrated.date.frame, human.calibrated.date.frame$ageGrid < 16500)#
    human.calibrated.date.frame$Legend <- rep("Human", length(human.calibrated.date.frame$ageGrid))#
    megafauna.calibrated.date.frame <- stack.14C.4D(date=megafauna.date, sigma=megafauna.sigma, xmin=xmin, xmax=xmax, lat=megafauna.lat, long=megafauna.long)#
    megafauna.calibrated.date.frame$Legend <- rep("Megafauna", length(megafauna.calibrated.date.frame$ageGrid))#
    blank <- seq(xmin, xmax, 1)#
    blank.lat <- rep(0, length(blank))#
    blank.long <- rep(0, length(blank))#
    blank.human <- rep("Human", length(blank))#
    blank.megafauna <- rep("Megafauna", length(blank))#
    blank.0 <- rep(0, length(blank))#
    all.ageGrid <- c(human.calibrated.date.frame$ageGrid,megafauna.calibrated.date.frame$ageGrid, blank, blank)#
    all.lat <- c(human.calibrated.date.frame$Lat,megafauna.calibrated.date.frame$Lat, blank.lat, blank.lat)#
    all.long <- c(human.calibrated.date.frame$Long,megafauna.calibrated.date.frame$Long, blank.long, blank.long)#
    all.densities <- c(human.calibrated.date.frame$densities,megafauna.calibrated.date.frame$densities, blank.0, blank.0)#
#
    all.densityscale <- c(human.calibrated.date.frame$DensityScale,megafauna.calibrated.date.frame$DensityScale, blank.0, blank.0)#
#
    all.legend <- c(human.calibrated.date.frame$Legend,megafauna.calibrated.date.frame$Legend, blank.human, blank.megafauna)#
    calibrated.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
    colnames(calibrated.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
    calibrated.date.frame <- calibrated.date.frame[complete.cases(calibrated.date.frame),]#
    dateScrubOld <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0.1#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe$DensityPlot <- dataframe$DensityScale*dataframe$point#
        return(dataframe)#
    }#
    dateScrubBad <- function(dataframe, age.min, age.max) {#
        dataframe <- dataframe[complete.cases(dataframe),]#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        dataframe.blank <- dataframe#
        dataframe.blank$densities <- dataframe.blank$densities*0#
        dataframe.blank$DensityScale <- dataframe.blank$DensityScale*0#
        dataframe.blank <- subset(dataframe.blank, dataframe$point==0)#
        all.ageGrid <- c(dataframe.val$ageGrid, dataframe.blank$ageGrid)#
        all.lat <- c(dataframe.val$Lat, dataframe.blank$Lat)#
        all.long <- c(dataframe.val$Long, dataframe.blank$Long)#
        all.densities <- c(dataframe.val$densities, dataframe.blank$densities)#
        all.densityscale <- c(dataframe.val$DensityScale, dataframe.blank$DensityScale)#
        all.legend <- c(as.vector(dataframe.val$Legend), as.vector(dataframe.blank$Legend))#
        full.date.frame <- data.frame(all.ageGrid,all.lat,all.long,all.densities, all.densityscale,all.legend)#
        colnames(full.date.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend")#
        full.date.frame <- full.date.frame[complete.cases(full.date.frame),]#
#
        return(full.date.frame)#
    }#
    dateScrub <- function(dataframe, age.min, age.max) {#
        dataframe$point <- 0#
        dataframe$point[findInterval(dataframe$ageGrid, c(age.min,age.max)) == 1L] <- 1#
        dataframe.val <- subset(dataframe, dataframe$point==1)#
        return(dataframe.val)#
    }#
    date.interval <- seq(from=xmin, to=xmax, by=interval)#
    date.interval <- rev(date.interval)#
    date.min <- date.interval-interval/2#
    date.max <- date.interval+interval/2#
    date.list <- pbapply::pblapply(date.interval, function(x) dateScrub(dataframe=calibrated.date.frame, age.min=x-interval/2, age.max=x+interval/2))#
    heat.function.min <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.max <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=densities, duplicate="user", dupfun="max", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        return(results)#
    }#
    heat.function.mean <- function(data.frame, x.res, y.res) {#
        data.frame <- data.frame[complete.cases(data.frame),]#
        data.frame.int <- with(data.frame, interp(x=Long, y=Lat, z=DensityScale, duplicate="user", dupfun="mean", nx=x.res, ny=y.res))#
        data.frame.int.melt <- melt(data.frame.int$z, na.rm=TRUE)#
        colnames(data.frame.int.melt) <- c("x", "y", "z")#
        data.frame.int.melt$x <- data.frame.int$x[data.frame.int.melt$x]#
        data.frame.int.melt$y <- data.frame.int$y[data.frame.int.melt$y]#
        coords.df <- data.frame(data.frame.int.melt$x, data.frame.int.melt$y)#
        colnames(coords.df) <- c("lon", "lat")#
        data.map <- SpatialPointsDataFrame(coords = coords.df, data = data.frame.int.melt,#
        proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))#
        land.clip <- crop(data.map, polyland)#
        results <- land.clip@data#
        #results$zmod <- reshape::rescaler.default(results$z, type = "range")#
        return(results)#
    }#
    animation::ani.options(convert="/usr/local/bin/convert")#
    animation::saveVideo(expr=for (i in seq_along(date.interval)) {#
        human.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Human")#
        megafauna.data <- subset(date.list[[i]], date.list[[i]]$Legend=="Megafauna")#
        blank.ageGrid <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.lat <- c(70.5,58.31,50.58,40.2,26.8,27.13,34.95,47.78,71.3,42.6)#
        blank.long <- c(-159, -154.64,-125.25,-124,-98,-81,-76.7,-54.33,-76.44,-100)#
        blank.densities <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.point <- c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0)#
        blank.legend.human <- rep("Human", 10)#
        blank.legend.megafauna <- rep("Megafauna", 10)#
        blank.megafauna.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.megafauna, blank.point)#
        colnames(blank.megafauna.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        blank.human.frame <- data.frame(blank.ageGrid, blank.lat, blank.long, blank.densities, blank.densities,blank.legend.human, blank.point)#
        colnames(blank.human.frame) <- c("ageGrid", "Lat", "Long", "densities", "DensityScale", "Legend", "point")#
        human.data <- rbind(human.data, blank.human.frame)#
        megafauna.data <- rbind(megafauna.data, blank.megafauna.frame)#
        human.int <- heat.function.mean(human.data, x.res=x.res, y.res=y.res)#
        megafauna.int <- heat.function.mean(megafauna.data, x.res=x.res, y.res=y.res)#
        human.names <- rep("Human", length(human.int$x))#
        megafauna.names <- rep("Megafauna", length(megafauna.int$x))#
        x.vector <- c(human.int$x, megafauna.int$x)#
        y.vector <- c(human.int$y, megafauna.int$y)#
        z.vector <- c(human.int$z/max(human.int$z), megafauna.int$z/max(megafauna.int$z))#
        name.vector <- c(human.names, megafauna.names)#
        total.frame <- data.frame(x.vector, y.vector, z.vector, name.vector)#
        colnames(total.frame) <- c("x", "y", "z", "Legend")#
        #num.f <- formatC(seq(xmin, xmax, interval), width=5, format="d", flag="0")#
        #num <- rev(num.f)#
        num <- formatC(seq(1, length(date.interval), 1), width=6, format="d", flag="0")#
        blank.human.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        blank.megafauna.plot <- ggmap(map) +#
        coord_equal() +#
        coord_map() +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.human.plot <- ggmap(map) +#
        #geom_contour(data=human.int, aes(x=x, y=y, z=z), colour="red", alpha=0.2, binwidth=0.01)+#
        geom_tile(data=human.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="pink", high="red",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Humans", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        val.megafauna.plot <- ggmap(map) +#
        #geom_contour(data=megafauna.int, aes(x=x, y=y, z=z), colour="blue", alpha=0.2, binwidth=0.01)+#
        geom_tile(data=megafauna.int, aes(x=x, y=y, fill=z,  alpha=z))+#
        coord_equal() +#
        coord_map() +#
        scale_alpha_continuous(range=c(0, 1), guide="none") +#
        scale_fill_gradient(name = "Latest Date", low="light blue", high="blue",  limits=c(0, 1)) +#
        scale_y_continuous("Latitude", limits = c(lat.min, lat.max)) +#
        scale_x_continuous("Longitude", limits = c(long.min, long.max)) +#
        theme_tufte() +#
        ggtitle(paste(date.interval[i], " cal BP | Megafauna", sep="")) +#
        guides(size=FALSE, alpha=FALSE, shape=FALSE, fill=FALSE)#
        megafauna.z <- sum(megafauna.int$z)#
        human.z <- sum(human.int$z)#
        human.plot <- if(human.z==0) {#
            blank.human.plot#
        } else {#
            val.human.plot#
        }#
        megafauna.plot <- if(megafauna.z==0) {#
            blank.megafauna.plot#
        } else {#
            val.megafauna.plot#
        }#
        ggsave(layOut(list(human.plot, 1:50, 1:50),#
        list(megafauna.plot, 1:50, 51:100)), filename=paste("/Users/lee/Dropbox/Documents/SCDPD/Map Runs/map",num[i], ".tiff", sep=""), device="tiff", dpi=320, width=frame.width, height=frame.height)#
    }, video.name="iberia.mp4", img.name="map")#
    #ffmpeg -f image2 -i map%06d.png -vcodec mjpeg -q:v 0 -r 25 iberia.avi#
}
mapGenHeatDualDensity(map=Eu, human.date=europe.human.14C, megafauna.date=europe.megafauna.14C, human.sigma=europe.human.sig, megafauna.sigma=europe.megafauna.sig, human.lat=europe.human.lat, human.long=europe.human.long, megafauna.lat=europe.megafauna.lat, megafauna.long=europe.megafauna.long, xmin = 5000, xmax=20000, interval=10, x.res=250, y.res=250, land.file="/Users/lee/Dropbox/Documents/SCDPD/Maps/ne_110m_coastline", lat.min=34, lat.max=70, long.min=-11, long.max=47, frame.width=6, frame.height=3.7)
library(xlsx)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(sp)#
library(reshape)#
library(pbapply)#
library(maptools)#
library(rgdal)#
library(ggmap)#
library(dismo)#
library(RgoogleMaps)#
library(maps)#
library(mapdata)#
library(raster)#
library(rasterVis)#
library(landsat)#
library(parallel)#
###Load Data#
#neolithic.bio <- read.csv(file="http://www.bleedrake.com/Neolithic/neolithic.csv")#
neolithic.bio <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/neolithicbio.csv")#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
neolithic.bio <- collapse.the.dates.begin(sites=neolithic.bio$Site, biogeo=neolithic.bio$Biogeo_Uni, general=neolithic.bio$St_Area_NE, dates=neolithic.bio$CYrBPunc, sigma=neolithic.bio$Sigma)#
###Load Calibration Curves#
#intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")#
intcal.13 <- read.csv(file="/Users/lee/Dropbox/4.2 ky event/Radiocarbon Final/intcal13.csv")#
#
###Create vectors from data set by region#
#
northwest.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$St_Area_NE==1)#
southwest.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$St_Area_NE==2)#
innmed.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$St_Area_NE==3)#
#
northwest.sig<- subset(neolithic.bio$Sigma, neolithic.bio$St_Area_NE==1)#
southwest.sig <- subset(neolithic.bio$Sigma, neolithic.bio$St_Area_NE==2)#
innmed.sig <- subset(neolithic.bio$Sigma, neolithic.bio$St_Area_NE==3)#
#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
innmed.intcal <- rep("intcal13", length(innmed.14C))#
#
northwest.names <- rep("northwest", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
innmed.names <- rep("innmed", length(innmed.14C))#
#
northwest.sites<- subset(neolithic.bio$Site, neolithic.bio$St_Area_NE==1)#
southwest.sites <- subset(neolithic.bio$Site, neolithic.bio$St_Area_NE==2)#
innmed.sites <- subset(neolithic.bio$Site, neolithic.bio$St_Area_NE==3)#
#
northwest.site.count <- length(unique(northwest.sites))#
southwest.site.count <- length(unique(southwest.sites))#
innmed.site.count <- length(unique(innmed.sites))#
#
northwest.col <- collapse.the.dates(sites=northwest.sites, dates=northwest.14C, sigma=northwest.sig)#
southhwest.col <- collapse.the.dates(sites=southwest.sites, dates=southwest.14C, sigma=southwest.sig)#
innmed.col <- collapse.the.dates(sites=innmed.sites, dates=innmed.14C, sigma=innmed.sig)#
#######By Region#
Cantabria.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Cantabria")#
Cantabria.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Cantabria")#
Cantabria.intcal <- rep("intcal13", length(Cantabria.14C))#
Cantabria.names <- rep("Cantabria", length(Cantabria.14C))#
Cantabria.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Cantabria")#
Cantabria.site.count <- length(unique(Cantabria.sites))#
#
Portugal.Septentrional.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Portugal Septentrional")#
Portugal.Septentrional.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Portugal Septentrional")#
Portugal.Septentrional.intcal <- rep("intcal13", length(Portugal.Septentrional.14C))#
Portugal.Septentrional.names <- rep("Portugal Septentrional", length(Portugal.Septentrional.14C))#
Portugal.Septentrional.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Portugal Septentrional")#
Portugal.Septentrional.site.count <- length(unique(Portugal.Septentrional.sites))#
#
Portugal.Meridional.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Portugal Meridional")#
Portugal.Meridional.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Portugal Meridional")#
Portugal.Meridional.intcal <- rep("intcal13", length(Portugal.Meridional.14C))#
Portugal.Meridional.names <- rep("Portugal Meridional", length(Portugal.Meridional.14C))#
Portugal.Meridional.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Portugal Meridional")#
Portugal.Meridional.site.count <- length(unique(Portugal.Meridional.sites))#
#
Pais.Valenciano.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Pais Valenciano")#
Pais.Valenciano.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Pais Valenciano")#
Pais.Valenciano.intcal <- rep("intcal13", length(Pais.Valenciano.14C))#
Pais.Valenciano.names <- rep("Pais Valenciano", length(Pais.Valenciano.14C))#
Pais.Valenciano.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Pais Valenciano")#
Pais.Valenciano.site.count <- length(unique(Pais.Valenciano.sites))#
#
Pais.Vasco.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Pais Vasco")#
Pais.Vasco.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Pais Vasco")#
Pais.Vasco.intcal <- rep("intcal13", length(Pais.Vasco.14C))#
Pais.Vasco.names <- rep("Pais Vasco", length(Pais.Vasco.14C))#
Pais.Vasco.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Pais Vasco")#
Pais.Vasco.site.count <- length(unique(Pais.Vasco.sites))#
#
Andalucia.Oriental.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Andalucia Oriental")#
Andalucia.Oriental.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Andalucia Oriental")#
Andalucia.Oriental.intcal <- rep("intcal13", length(Andalucia.Oriental.14C))#
Andalucia.Oriental.names <- rep("Andalucia Oriental", length(Andalucia.Oriental.14C))#
Andalucia.Oriental.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Andalucia Oriental")#
Andalucia.Oriental.site.count <- length(unique(Andalucia.Oriental.sites))#
#
Aragon.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Aragon")#
Aragon.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Aragon")#
Aragon.intcal <- rep("intcal13", length(Aragon.14C))#
Aragon.names <- rep("Aragon", length(Aragon.14C))#
Aragon.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Aragon")#
Aragon.site.count <- length(unique(Aragon.sites))#
#
Castilla.Leon.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Castilla Leon")#
Castilla.Leon.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Castilla Leon")#
Castilla.Leon.intcal <- rep("intcal13", length(Castilla.Leon.14C))#
Castilla.Leon.names <- rep("Castilla Leon", length(Castilla.Leon.14C))#
Castilla.Leon.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Castilla Leon")#
Castilla.Leon.site.count <- length(unique(Castilla.Leon.sites))#
#
Galicia.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Galicia")#
Galicia.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Galicia")#
Galicia.intcal <- rep("intcal13", length(Galicia.14C))#
Galicia.names <- rep("Galicia", length(Galicia.14C))#
Galicia.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Galicia")#
Galicia.site.count <- length(unique(Galicia.sites))#
#
Cataluna.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Cataluna")#
Cataluna.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Cataluna")#
Cataluna.intcal <- rep("intcal13", length(Cataluna.14C))#
Cataluna.names <- rep("Cataluna", length(Cataluna.14C))#
Cataluna.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Cataluna")#
Cataluna.site.count <- length(unique(Cataluna.sites))#
#
Andalucia.Central.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Andalucia Central")#
Andalucia.Central.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Andalucia Central")#
Andalucia.Central.intcal <- rep("intcal13", length(Andalucia.Central.14C))#
Andalucia.Central.names <- rep("Andalucia Central", length(Andalucia.Central.14C))#
Andalucia.Central.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Andalucia Central")#
Andalucia.Central.site.count <- length(unique(Andalucia.Central.sites))#
#
Asturias.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Asturias")#
Asturias.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Asturias")#
Asturias.intcal <- rep("intcal13", length(Asturias.14C))#
Asturias.names <- rep("Asturias", length(Asturias.14C))#
Asturias.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Asturias")#
Asturias.site.count <- length(unique(Asturias.sites))#
#
Murcia.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Murcia")#
Murcia.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Murcia")#
Murcia.intcal <- rep("intcal13", length(Murcia.14C))#
Murcia.names <- rep("Murcia", length(Murcia.14C))#
Murcia.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Murcia")#
Murcia.site.count <- length(unique(Murcia.sites))#
#
Navarra.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Navarra")#
Navarra.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Navarra")#
Navarra.intcal <- rep("intcal13", length(Navarra.14C))#
Navarra.names <- rep("Navarra", length(Navarra.14C))#
Navarra.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Navarra")#
Navarra.site.count <- length(unique(Navarra.sites))#
#
Castilla.La.Mancha.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Castilla La Mancha ")#
Castilla.La.Mancha.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Castilla La Mancha ")#
Castilla.La.Mancha.intcal <- rep("intcal13", length(Castilla.La.Mancha.14C))#
Castilla.La.Mancha.names <- rep("Castilla La Mancha ", length(Castilla.La.Mancha.14C))#
Castilla.La.Mancha.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Castilla La Mancha ")#
Castilla.La.Mancha.site.count <- length(unique(Castilla.La.Mancha.sites))#
#
Madrid.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Madrid")#
Madrid.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Madrid")#
Madrid.intcal <- rep("intcal13", length(Madrid.14C))#
Madrid.names <- rep("Madrid", length(Madrid.14C))#
Madrid.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Madrid")#
Madrid.site.count <- length(unique(Madrid.sites))#
#
Andalucia.Occidental.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Andalucia Occidental")#
Andalucia.Occidental.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Andalucia Occidental")#
Andalucia.Occidental.intcal <- rep("intcal13", length(Andalucia.Occidental.14C))#
Andalucia.Occidental.names <- rep("Andalucia Occidental", length(Andalucia.Occidental.14C))#
Andalucia.Occidental.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Andalucia Occidental")#
Andalucia.Occidental.site.count <- length(unique(Andalucia.Occidental.sites))#
#
La.Rioja.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="La Rioja")#
La.Rioja.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="La Rioja")#
La.Rioja.intcal <- rep("intcal13", length(La.Rioja.14C))#
La.Rioja.names <- rep("La Rioja", length(La.Rioja.14C))#
La.Rioja.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="La Rioja")#
La.Rioja.site.count <- length(unique(La.Rioja.sites))#
#
Extremadura.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Extremadura")#
Extremadura.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Extremadura")#
Extremadura.intcal <- rep("intcal13", length(Extremadura.14C))#
Extremadura.names <- rep("Extremadura", length(Extremadura.14C))#
Extremadura.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Extremadura")#
Extremadura.site.count <- length(unique(Extremadura.sites))#
#
Portugal.Central.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Region=="Portugal Central")#
Portugal.Central.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Region=="Portugal Central")#
Portugal.Central.intcal <- rep("intcal13", length(Portugal.Central.14C))#
Portugal.Central.names <- rep("Portugal Central", length(Portugal.Central.14C))#
Portugal.Central.sites<- subset(neolithic.bio$Site, neolithic.bio$Region=="Portugal Central")#
Portugal.Central.site.count <- length(unique(Portugal.Central.sites))#
#Joined Regions#
Astuarias.Cantabria.14C <- c(Asturias.14C, Cantabria.14C)#
Astuarias.Cantabria.sig <- c(Asturias.sig, Cantabria.sig)#
Astuarias.Cantabria.intcal <- c(Asturias.intcal, Cantabria.intcal)#
Astuarias.Cantabria.names <- c(Asturias.names, Cantabria.names)#
Astuarias.Cantabria.sites <- c(Asturias.sites, Cantabria.sites)#
Astuarias.Cantabria.site.count <- length(unique(Astuarias.Cantabria.sites))#
#
PV.Navara.14C <- c(Pais.Vasco.14C, Navarra.14C)#
PV.Navara.sig <- c(Pais.Vasco.sig, Navarra.sig)#
PV.Navara.intcal <- c(Pais.Vasco.intcal, Navarra.intcal)#
PV.Navara.names <- c(Pais.Vasco.names, Navarra.names)#
PV.Navara.sites <- c(Pais.Vasco.sites, Navarra.sites)#
PV.Navara.site.count <- length(unique(PV.Navara.sites))#
#
CL.LR.14C <- c(Castilla.Leon.14C, La.Rioja.14C)#
CL.LR.sig <- c(Castilla.Leon.sig, La.Rioja.sig)#
CL.LR.intcal <- c(Castilla.Leon.intcal, La.Rioja.intcal)#
CL.LR.names <- c(Castilla.Leon.names, La.Rioja.names)#
CL.LR.sites <- c(Castilla.Leon.sites, La.Rioja.sites)#
CL.LR.site.count <- length(unique(CL.LR.sites))#
#
Madrid.CM.14C <- c(Madrid.14C, Castilla.La.Mancha.14C)#
Madrid.CM.sig <- c(Madrid.sig, Castilla.La.Mancha.sig)#
Madrid.CM.intcal <- c(Madrid.intcal, Castilla.La.Mancha.intcal)#
Madrid.CM.names <- c(Madrid.names, Castilla.La.Mancha.names)#
Madrid.CM.sites <- c(Madrid.sites, Castilla.La.Mancha.sites)#
Madrid.CM.site.count <- length(unique(Madrid.CM.sites))#
#
PM.Murcia.14C <- c(Pais.Valenciano.14C, Murcia.14C)#
PM.Murcia.sig <- c(Pais.Valenciano.sig, Murcia.sig)#
PM.Murcia.intcal <- c(Pais.Valenciano.intcal, Murcia.intcal)#
PM.Murcia.names <- c(Pais.Valenciano.names, Murcia.names)#
PM.Murcia.sites <- c(Pais.Valenciano.sites, Murcia.sites)#
PM.Murcia.site.count <- length(unique(PM.Murcia.sites))#
#####Climate Divisions#
Bsk.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Bsk")#
Csa.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Csa")#
Csb.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Csb")#
Cfa.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Cfa")#
Cfb.bp <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Koppen=="Cfb")#
#
Bsk.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Bsk")#
Csa.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Csa")#
Csb.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Csb")#
Cfa.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Cfa")#
Cfb.sig <- subset(neolithic.bio$Sigma, neolithic.bio$Koppen=="Cfb")#
Bsk.names <- rep("Bsk", length(Bsk.bp))#
Csa.names <- rep("Csa", length(Csa.bp))#
Csb.names <- rep("Csb", length(Csb.bp))#
Cfa.names <- rep("Cfa", length(Cfa.bp))#
Cfb.names <- rep("Cfb", length(Cfb.bp))#
Bsk.description <- rep("Semiarid Steppe", length(Bsk.bp))#
Csa.description <- rep("Hot Mediterranean", length(Csa.bp))#
Csb.description <- rep("Cool Mediterranean", length(Csb.bp))#
Cfa.descritpion <- rep("Hot Subtropical", length(Cfa.bp))#
Cfb.description <- rep("Cool Subtropical", length(Cfb.bp))#
Bsk.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Bsk")#
Bsk.site.count <- length(unique(Bsk.sites))#
#
Csa.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Csa")#
Csa.site.count <- length(unique(Csa.sites))#
#
Csb.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Csb")#
Csb.site.count <- length(unique(Csb.sites))#
#
Cfa.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Cfa")#
Cfa.site.count <- length(unique(Cfa.sites))#
#
Cfb.sites<- subset(neolithic.bio$Site, neolithic.bio$Koppen=="Cfb")#
Cfb.site.count <- length(unique(Cfb.sites))#
####Environmental#
atlantic.european.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Atlantic European")#
atlantic.european.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Atlantic European")#
atlantic.european.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Atlantic European")))#
atlantic.european.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Atlantic European")))#
atlantic.european.intcal <- rep("intcal13", length(atlantic.european.14C))#
atlantic.european.names <- rep("Atlantic European", length(atlantic.european.14C))#
atlantic.european.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Atlantic European")#
atlantic.european.site.count <- length(unique(atlantic.european.sites))#
#
balearic.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")#
balearic.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")#
balearic.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")))#
balearic.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")))#
balearic.intcal <- rep("intcal13", length(balearic.14C))#
balearic.names <- rep("Balearic-Catalonian-Provençal", length(balearic.14C))#
balearic.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Balearic-Catalonian-Provençal")#
balearic.site.count <- length(unique(balearic.sites))#
#
betican.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Betican")#
betican.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Betican")#
betican.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Betican")))#
betican.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Betican")))#
betican.intcal <- rep("intcal13", length(betican.14C))#
betican.names <- rep("Betican", length(betican.14C))#
betican.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Betican")#
betican.site.count <- length(unique(betican.sites))#
#
cevenno.pyrenean.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")#
cevenno.pyrenean.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")#
cevenno.pyrenean.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")))#
cevenno.pyrenean.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")))#
cevenno.pyrenean.intcal <- rep("intcal13", length(cevenno.pyrenean.14C))#
cevenno.pyrenean.names <- rep("Cevenno-Pyrenean", length(cevenno.pyrenean.14C))#
cevenno.pyrenean.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Cevenno-Pyrenean")#
cevenno.pyrenean.site.count <- length(unique(cevenno.pyrenean.sites))#
#
lusitano.andalusian.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")#
lusitano.andalusian.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")#
lusitano.andalusian.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")))#
lusitano.andalusian.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")))#
lusitano.andalusian.intcal <- rep("intcal13", length(lusitano.andalusian.14C))#
lusitano.andalusian.names <- rep("Coastal Lusitano-Andalusian", length(lusitano.andalusian.14C))#
lusitano.andalusian.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Coastal Lusitano-Andalusian")#
lusitano.andalusian.site.count <- length(unique(lusitano.andalusian.sites))#
#
mediterranean.inner.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")#
mediterranean.inner.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")#
mediterranean.inner.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")))#
mediterranean.inner.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")))#
mediterranean.inner.intcal <- rep("intcal13", length(mediterranean.inner.14C))#
mediterranean.inner.names <- rep("Mediterranean Central Iberia", length(mediterranean.inner.14C))#
mediterranean.inner.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Mediterranean Central Iberia")#
mediterranean.inner.site.count <- length(unique(mediterranean.inner.sites))#
#
mediterranean.west.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")#
mediterranean.west.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")#
mediterranean.west.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")))#
mediterranean.west.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")))#
mediterranean.west.intcal <- rep("intcal13", length(mediterranean.west.14C))#
mediterranean.west.names <- rep("Mediterranean West Iberian", length(mediterranean.west.14C))#
mediterranean.west.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Mediterranean West Iberian")#
mediterranean.west.site.count <- length(unique(mediterranean.west.sites))#
#
murcian.14C <- subset(neolithic.bio$CYrBPunc, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")#
murcian.sig<- subset(neolithic.bio$Sigma, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")#
murcian.14C.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.14C, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")))#
murcian.sig.col <- as.vector(na.omit(subset(neolithic.bio$Collapsed.Sigma, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")))#
murcian.intcal <- rep("intcal13", length(murcian.14C))#
murcian.names <- rep("Murcian-Almerian", length(murcian.14C))#
murcian.sites<- subset(neolithic.bio$Site, neolithic.bio$Biogeo_Uni=="Murcian-Almerian")#
murcian.site.count <- length(unique(murcian.sites))#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
#
mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
simplify = simplify)#
#
}#
#
collapse.dates <- function(sites, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Sites", "Date", "Sigma")#
    df <- arrange(df, desc(Date))#
    df <- arrange(df, desc(Sites))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    return(df)#
    }#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) { #
samp.intcal <- rep("intcal13", length(x))#
samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
samp.ages <- ldply(samp.slugdens, data.frame)#
res.by <- by(samp.ages$ageGrid, samp.ages$.id, median) #
res.t <- t(res.by)#
samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
time <- seq(xmin+5, xmax-5, 10)#
samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
samp.hist <- hist(samp.grid, breaks=length(time))#
samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
colnames(samp.hist) <- c("Age", "Counts", "Density")#
#samp.hist <- arrange(samp.all, desc(Age))#
#
makeloess <- function(x, n){#
time <- seq(xmin+5, xmax-5, 10)#
samp.age <- sample(x, size=n, replace=TRUE)#
samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
samp.dist <- as.vector(samp.dist)#
samp.dist <- c(xmax, xmin, samp.dist)#
samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
samp.loess <- lowess(time, samp.date, f=0.15)#
samp.fitted <- samp.loess$y#
return(samp.fitted)#
}#
#
samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
samp.replicate <- as.data.frame(samp.replicate)#
samp.replicate[is.na(samp.replicate)] <- 0#
samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
#
samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
#
samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
#samp.descriptive <- arrange(samp.descriptive, desc(Age))#
samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
names(samp.all)[names(samp.all)=="time"] <- "Age"#
names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
samp.all <- arrange(samp.all, desc(Age))#
return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess.old <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronCalibrate(samp.14C, samp.sig, rep("intcal13", n))#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
#####Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
          samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}
library(shiny)
runApp("~/GitHub/xrf-app")
library(shiny)
runApp("~/GitHub/xrf-app")
runGitHub("leedrake5/CloudSpectra")
library(shiny)
runGitHub("leedrake5/CloudSpectra")
runApp("~/GitHub/congressImpact")
library(shiny)
runApp("~/GitHub/5i Results App")
library(rgl)
bg3d("white") # if you want a black background#
rgl.spheres(0, 0, 0, texture="~/Dropbox/Documents/Anacom/Maps/Raw/Silicon.png", lit=FALSE)
bg3d("white") # if you want a black background#
rgl.spheres(0, 0, 0, texture="~/Dropbox/Documents/Anacom/Maps/Raw/Calcium.png", lit=FALSE)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape)#
library(sp)#
library(raster)#
library(rgdal)#
library(rgeos)#
library(maptools)#
library(sp)#
library(spatialEco)#
#
###Load Packages#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
#
###Download Packages (if needed) at http://www.bleedrake.com/Neolithic/Neolithic.zip#
#
###Load Data#
neolithic.bio <- read.csv(file="http://www.bleedrake.com/Neolithic/neolithic.csv")#
all.data <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/All Iberia/Just Dates-1-Table 1.csv")#
#
###Load Calibration Curves#
intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")#
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#####Collapse Dates#
collapse.the.dates.new <- function(sites, region, context, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, context, lat, long, as.numeric(dates), as.numeric(sigma))#
    colnames(df) <- c("Site", "Region", "Context", "Lat", "Long", "CYrBPunc", "Sigma")#
    df <- subset(df, df$CYrBPunc < datemax & df$CYrBPunc > datemin)#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),6]-df[2:nrow(df), 6]))/((sqrt(df[2:nrow(df), 7]^2 + df[1:(nrow(df)-1),7]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
neolithic.bio <- collapse.the.dates.begin(sites=neolithic.bio$Site, biogeo=neolithic.bio$Biogeo_Uni, general=neolithic.bio$St_Area_NE, dates=neolithic.bio$CYrBPunc, sigma=neolithic.bio$Sigma)#
#####Intersect 14C dates by region#
antonio.regions <- readOGR("/Users/lee/Dropbox/4.2 ky event/jwp paper/Event42_areasIberia", "Event42_areasIberia")#
antonio.p1 <- as(antonio.regions, "SpatialPolygons")#
antonio.p1@data$id = rownames(antonio.p1@data)#
#
small.frame <- data.frame(all.data$Region, all.data$Site, all.data$Site.Type, all.data$Site.Type.Simple, all.data$Context..phase..etc.., all.data$Lat.in.Dec, all.data$Long.in.Dec, all.data$Sample.Lab.Number, all.data$X14C.Yr.BP.uncal, all.data$Sigma)#
colnames(small.frame) <- c("Region", "Site", "Details", "Type", "Context", "Latitude", "Longitude", "LabNumber", "Date", "Sigma")#
small.frame <- small.frame[!(is.na(small.frame$Latitude) | small.frame$Latitude==""), ]#
small.frame <- small.frame[!(is.na(small.frame$Longitude) | small.frame$Longitude==""), ]#
small.frame$Region <- sub("^$", "0", small.frame$Region)#
small.frame$Site <- sub("^$", "0", small.frame$Site)#
small.frame$Type <- sub("^$", "0", small.frame$Type)#
small.frame$Context <- sub("^$", "0", small.frame$Context)#
small.frame$LabNumber <- sub("^$", "0", small.frame$LabNumber)#
small.frame$Date <- sub("^$", "0", small.frame$Date)#
small.frame$Sigma <- sub("^$", "0", small.frame$Sigma)#
iberia.points <- data.frame(small.frame)#
#
coordinates(iberia.points) = ~Longitude+Latitude#
proj4string(iberia.points) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0")#
#
iberia.points <- spTransform(iberia.points, CRS("+proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs"))#
#
overlap <- over(iberia.points, antonio.regions)#
#
iberia.points@data$NewRegion <- overlap$Area_code#
iberia.point.var <- spTransform(iberia.points, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0"))#
iberia.data <- data.frame(iberia.points)#
iberia.data$Site <- as.character(iberia.data$Site)#
iberia.data2 <- data.frame(iberia.point.var)#
iberia.data2$NewRegion <- as.character(iberia.data2$NewRegion)#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SW", "Southwest")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SE", "Southeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="Mediterranean", "Northeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="North", "Northwest")#
iberia.col <- collapse.the.dates.new(sites=iberia.data2$Site, region=iberia.data2$NewRegion, context=iberia.data2$Type, lat=iberia.data2$Latitude, long=iberia.data2$Longitude, dates=iberia.data2$Date, sigma=iberia.data2$Sigma, datemin=1000, datemax=14000)#
#
spain <- get_map(location="Spain", zoom=6, maptype="terrain")#
#
Fig4 <- ggmap(spain, alpha=0.2) +#
geom_point(data=iberia.col, aes(x=Long, y=Lat, colour=Region, shape=Region), size=3, alpha=0.4)+#
coord_equal() +#
coord_map() +#
theme_tufte() +#
scale_x_continuous("Longitude") +#
scale_y_continuous("Latitude") +#
guides(size=FALSE, alpha=FALSE)#
#
ggsave(Fig4, , file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure 4.tiff", dpi=300, device="tiff")#
##########################
###Generalized Regions####
##########################
#
northwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northwest")#
southwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southwest")#
southeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southeast")#
meseta.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Meseta")#
northeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northeast")#
northwest.sig<- subset(iberia.col$Sigma, iberia.col$Region=="Northwest")#
southwest.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southwest")#
southeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southeast")#
meseta.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Meseta")#
northeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Northeast")#
#
northwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northwest"))#
southwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southwest"))#
southeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southeast"))#
meseta.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Meseta"))#
northeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northeast"))#
#
northwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northwest")#
southwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southwest")#
southeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southeast")#
meseta.lat <- subset(iberia.col$Lat, iberia.col$Region=="Meseta")#
northeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northeast")#
#
northwest.long <- subset(iberia.col$Long, iberia.col$Region=="Northwest")#
southwest.long <- subset(iberia.col$Long, iberia.col$Region=="Southwest")#
southeast.long <- subset(iberia.col$Long, iberia.col$Region=="Southeast")#
meseta.long <- subset(iberia.col$Long, iberia.col$Region=="Meseta")#
northeast.long <- subset(iberia.col$Long, iberia.col$Region=="Northeast")#
#
northwest.context <- subset(iberia.col$Context, iberia.col$Region=="Northwest")#
southwest.context <- subset(iberia.col$Context, iberia.col$Region=="Southwest")#
southeast.context <- subset(iberia.col$Context, iberia.col$Region=="Southeast")#
meseta.context <- subset(iberia.col$Context, iberia.col$Region=="Meseta")#
northeast.context <- subset(iberia.col$Context, iberia.col$Region=="Northeast")#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
southeast.intcal <- rep("intcal13", length(southeast.14C))#
meseta.intcal <- rep("intcal13", length(meseta.14C))#
northeast.intcal <- rep("intcal13", length(northeast.14C))#
northwest.names <- rep("North", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
southeast.names <- rep("Southeast", length(southeast.14C))#
meseta.names <- rep("Meseta", length(meseta.14C))#
northeast.names <- rep("Northeast", length(northeast.14C))#
northwest.sites<- subset(iberia.col$Site, iberia.col$Region=="Northwest")#
southwest.sites <- subset(iberia.col$Site, iberia.col$Region=="Southwest")#
southeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Southeast")#
meseta.sites <- subset(iberia.col$Site, iberia.col$Region=="Meseta")#
northeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Northeast")#
northwest.site.count <- length(unique(as.vector(northwest.sites)))#
southwest.site.count <- length(unique(southwest.sites))#
southeast.site.count <- length(unique(southeast.sites))#
meseta.site.count <- length(unique(meseta.sites))#
northeast.site.count <- length(unique(northeast.sites))#
#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
#
mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
simplify = simplify)#
#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) { #
samp.intcal <- rep("intcal13", length(x))#
samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
samp.ages <- ldply(samp.slugdens, data.frame)#
res.by <- by(samp.ages$ageGrid, samp.ages$.id, median) #
res.t <- t(res.by)#
samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
time <- seq(xmin+5, xmax-5, 10)#
samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
samp.hist <- hist(samp.grid, breaks=length(time))#
samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
colnames(samp.hist) <- c("Age", "Counts", "Density")#
#samp.hist <- arrange(samp.all, desc(Age))#
#
makeloess <- function(x, n){#
time <- seq(xmin+5, xmax-5, 10)#
samp.age <- sample(x, size=n, replace=TRUE)#
samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
samp.dist <- as.vector(samp.dist)#
samp.dist <- c(xmax, xmin, samp.dist)#
samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
samp.loess <- lowess(time, samp.date, f=0.15)#
samp.fitted <- samp.loess$y#
return(samp.fitted)#
}#
#
samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
samp.replicate <- as.data.frame(samp.replicate)#
samp.replicate[is.na(samp.replicate)] <- 0#
samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
#
samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
#
samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
#samp.descriptive <- arrange(samp.descriptive, desc(Age))#
samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
names(samp.all)[names(samp.all)=="time"] <- "Age"#
names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
samp.all <- arrange(samp.all, desc(Age))#
return(samp.all)#
}#
#
d#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
          samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess.old <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+1, xmax, 1)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.grid <- c(fill, samp.grid)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+1, xmax, 1)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(fill, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.cal.loess.trad <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.loess <- function(dates, sigma, sites, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    small.age.frame <- data.frame(samp.ages$.id, as.vector(samp.ages$ageGrid), as.vector(samp.ages$ageSds))#
    colnames(small.age.frame) <- c("Id", "ageGrid", "ageSDS")#
    samp.test <- aggregate(small.age.frame[,2:3], by=list(small.age.frame$Id), FUN=median)#
    colnames(samp.test) <- c("Id", "Mean", "SD")#
    samp.test$Min <- samp.test$Mean-samp.test$SD#
    samp.test$Max <- samp.test$Mean+samp.test$SD#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    samp.age.grid <- subset(samp.age.grid, !(xmin > samp.age.grid | samp.age.grid > xmax))#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(c(samp.grid, xmin, xmax), breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(a.frame, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.id <- as.vector(sample(as.vector(a.frame$Id), size=n, replace=TRUE))#
        t.frame <- data.frame(t(a.frame))#
        colnames(t.frame) <- a.frame$Id#
        s.t.frame <- t.frame[,samp.id]#
        f.frame <- data.frame(t(s.t.frame))#
        #f.frame <- data.table(f.frame)#
        small.frame <- data.frame(f.frame$Id, f.frame$Min, f.frame$Max)#
        colnames(small.frame) <- c("Id", "Min", "Max")#
        small.list <- split(as.vector(small.frame[,2:3]), f=small.frame$Id)#
        small.list <- lapply(small.list, function(x) as.vector(x[1,]))#
        seq.gen <- function(a.frame) {#
            a.frame <- as.data.frame(a.frame)#
            at.vector <- as.numeric(as.vector(as.data.frame(t(a.frame))[,1]))#
            sequence <- seq(from=at.vector[1], to=at.vector[2], by=1)#
            return(sequence)#
        }#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- ldply(all.seq, data.frame)[,2]#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- as.vector(tapply(samp.dist, cut(samp.dist, length(time)), length))#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- as.vector(ldply(all.seq, data.frame)[,2])#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(samp.test, reps)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
stack.14C.taxa.old <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma*2#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma*2#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#######
stack.14C <- function(x, sigma, xmin, xmax, taxa){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
taphonomic.correct <- function(stack.14C.data) {#
    df <- stack.14C.data#
    n.t <- 5.726442*(10^6)*(df$Age + 2176.4)^-1.3925309#
    lambda <- 1.3925309/(2176.4+df$Age)*100#
    lambda.r <- 1-lambda#
    n.t.relative <- n.t/128.8192#
    df$Counts.Corrected <-df$Counts/n.t.relative#
    count.mod.sum <- sum(df$Counts.Corrected)#
    df$Density.Corrected <- df$Counts.Corrected/count.mod.sum#
    return(df)#
}#
criterion.data.null <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !stack.14C.taxa.object$Taxa==criteria.names)#
    ageGrids <- c(temp.df.1$ageGrid, temp.df.2$ageGrid)#
    Taxa <- c(as.vector(temp.df.1$Taxa), rep("Other", length(temp.df.2$ageGrid)))#
    temp.df <- data.frame(ageGrids, Taxa)#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
criterion.data.old <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, corrected.samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)), even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    colnames(temp.df.alt) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    temp.list.alt <- split(temp.df.alt$ageGrid, f=temp.df.alt$Taxa)#
    temp.list.alt <- rapply(temp.list.alt, f=sort, how="list", decreasing=TRUE)#
    samp.hist.list.alt <- rapply(temp.list.alt, f=hist, how="list", breaks=length(time))#
    samp.mids.alt <- sapply(samp.hist.list.alt, "[[", 4)#
    samp.counts.alt <- sapply(samp.hist.list.alt, "[[", 2)#
    samp.density.alt <- sapply(samp.hist.list.alt, "[[", 3)#
    samp.mids.df.alt <- ldply(samp.mids.alt, data.frame)#
    samp.counts.df.alt <- ldply(samp.counts.alt, data.frame)#
    samp.density.df.alt <- ldply(samp.density.alt, data.frame)#
    hist.alt <- hist(temp.df.alt$ageGrid, breaks=length(time))#
    samp.mids.alt <- hist.alt$mids#
    samp.counts.alt <- hist.alt$counts#
    count.sum <- sum(samp.counts.alt)#
    samp.density.alt <- hist.alt$density#
    samp.names.alt <- rep("Total", length(samp.mids.alt))#
    samp.hist <- data.frame(c(samp.mids.df[,1], samp.names.alt), as.numeric(as.vector(c(samp.mids.df[,2], samp.mids.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt)))/count.sum)#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)),#
        as.numeric(as.vector(even.more.corrected.samp.hist$Freq))/count.sum,#
        even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Density", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data.test <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    df <- data.frame(c(temp.df.1$ageGrid, temp.df.2$ageGrid), c(as.vector(temp.df.1$Taxa), rep("Total", length(temp.df.2$ageGrid))))#
    colnames(df) <- c("ageGrid", "Taxa")#
    return(df)#
}#
median.stack.14C.half <- function(x, sigma, sites, context, xmin, xmax){#
    intcal13 <- intcal.13#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(as.numeric(as.vector(x)), as.numeric(as.vector(sigma)), samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    small.frame <- data.frame(medians.all, sites, context)#
    colnames(small.frame) <- c("Median", "Site", "Context")#
    #medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    small.frame <- subset(small.frame, !(small.frame$Median > xmax | small.frame$Median < xmin))#
    return(small.frame)#
}#
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)#
north.med.site.count <- length(unique(north.med$Site))#
meseta.med.site.count <- length(unique(meseta.med$Site))#
med.med.site.count <- length(unique(med.med$Site))#
southwest.med.site.count <- length(unique(southwest.med$Site))#
southeast.med.site.count <- length(unique(southeast.med$Site))
northwest.med
####Taxa Analysis#
northwest.stack <- stack.14C.taxa(date=northwest.14C, sigma=northwest.sig, xmin=0, xmax=12000, lat=northwest.lat, long=northwest.long, taxa=northwest.taxa)#
southwest.stack <- stack.14C.taxa(date=southwest.14C, sigma=southwest.sig, xmin=2000, xmax=12000, lat=southwest.lat, long=southwest.long, taxa=southwest.taxa)#
southeast.stack <- stack.14C.taxa(date=southeast.14C, sigma=southeast.sig, xmin=2000, xmax=12000, lat=southeast.lat, long=southeast.long, taxa=southeast.taxa)#
meseta.stack <- stack.14C.taxa(date=meseta.14C, sigma=meseta.sig, xmin=2000, xmax=12000, lat=meseta.lat, long=meseta.long, taxa=meseta.taxa)#
northeast.stack <- stack.14C.taxa(date=northeast.14C, sigma=northeast.sig, xmin=2000, xmax=12000, lat=northeast.lat, long=northeast.long, taxa=northeast.taxa)#
#
northwest.criterion <- criterion.data(northwest.stack, criteria.names=c("Burial", "Settlement"), xmin=0, xmax=12000)#
southwest.criterion <- criterion.data(southwest.stack, criteria.names=c("Burial",  "Settlement"), xmin=0, xmax=12000)#
southeast.criterion <- criterion.data(southeast.stack, criteria.names=c("Burial",  "Settlement"), xmin=0, xmax=12000)#
meseta.criterion <- criterion.data(meseta.stack, criteria.names=c("Burial", "Settlement"), xmin=0, xmax=12000)#
northeast.criterion <- criterion.data(northeast.stack, criteria.names=c("Burial",  "Settlement"), xmin=0, xmax=12000)
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff")#
southwest.sub.plot <- ggplot(southwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
ggtitle("Southwest")#
#ggsave(southwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure18.tiff", dpi=300, device="tiff")#
southeast.sub.plot <- ggplot(southeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
ggtitle("Southeast")#
#ggsave(southeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure20.tiff", dpi=300, device="tiff")#
meseta.sub.plot <- ggplot(meseta.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
ggtitle("Meseta")#
#ggsave(meseta.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure9.tiff", dpi=300, device="tiff")#
northeast.sub.plot <- ggplot(northeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
ggtitle("Northeast")#
#ggsave(northeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure16.tiff", dpi=300, device="tiff")
northeast.sub.plot
northeast.sub.plot <- ggplot(northeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northeast")#
#ggsave(northeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure16.tiff", dpi=300, device="tiff")
northeast.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff")#
southwest.sub.plot <- ggplot(southwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southwest")#
ggsave(southwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure18.tiff", dpi=300, device="tiff")#
southeast.sub.plot <- ggplot(southeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southeast")#
ggsave(southeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure20.tiff", dpi=300, device="tiff")#
meseta.sub.plot <- ggplot(meseta.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Meseta")#
ggsave(meseta.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure9.tiff", dpi=300, device="tiff")#
northeast.sub.plot <- ggplot(northeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northeast")#
ggsave(northeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure16.tiff", dpi=300, device="tiff")
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
southwest.sub.plot <- ggplot(southwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southwest")#
ggsave(southwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure18.tiff", dpi=300, device="tiff", width=10, height=7)#
southeast.sub.plot <- ggplot(southeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southeast")#
ggsave(southeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure20.tiff", dpi=300, device="tiff", width=10, height=7)#
meseta.sub.plot <- ggplot(meseta.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Meseta")#
ggsave(meseta.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure9.tiff", dpi=300, device="tiff", width=10, height=7)
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=15, height=9)#
southwest.sub.plot <- ggplot(southwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southwest")#
ggsave(southwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure18.tiff", dpi=300, device="tiff", width=15, height=9)#
southeast.sub.plot <- ggplot(southeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southeast")#
ggsave(southeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure20.tiff", dpi=300, device="tiff", width=15, height=9)#
meseta.sub.plot <- ggplot(meseta.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, 1.05), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Meseta")#
ggsave(meseta.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure9.tiff", dpi=300, device="tiff", width=15, height=9)
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0, .9), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0,.05 .95), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.05, .95), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
southwest.sub.plot <- ggplot(southwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southwest")#
ggsave(southwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure18.tiff", dpi=300, device="tiff", width=10, height=7)#
southeast.sub.plot <- ggplot(southeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southeast")#
ggsave(southeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure20.tiff", dpi=300, device="tiff", width=10, height=7)#
meseta.sub.plot <- ggplot(meseta.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Meseta")#
ggsave(meseta.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure9.tiff", dpi=300, device="tiff", width=10, height=7)#
northeast.sub.plot <- ggplot(northeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northeast")#
ggsave(northeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure16.tiff", dpi=300, device="tiff", width=10, height=7)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape)#
library(sp)#
library(raster)#
library(rgdal)#
library(rgeos)#
library(maptools)#
library(sp)#
library(spatialEco)#
#
###Load Packages#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
#
###Download Packages (if needed) at http://www.bleedrake.com/Neolithic/Neolithic.zip#
#
###Load Data#
neolithic.bio <- read.csv(file="http://www.bleedrake.com/Neolithic/neolithic.csv")#
all.data <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/All Iberia/Just Dates-1-Table 1.csv")#
#
###Load Calibration Curves#
intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")#
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#####Collapse Dates#
collapse.the.dates.new <- function(sites, region, context, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, context, lat, long, as.numeric(dates), as.numeric(sigma))#
    colnames(df) <- c("Site", "Region", "Context", "Lat", "Long", "CYrBPunc", "Sigma")#
    df <- subset(df, df$CYrBPunc < datemax & df$CYrBPunc > datemin)#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),6]-df[2:nrow(df), 6]))/((sqrt(df[2:nrow(df), 7]^2 + df[1:(nrow(df)-1),7]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
neolithic.bio <- collapse.the.dates.begin(sites=neolithic.bio$Site, biogeo=neolithic.bio$Biogeo_Uni, general=neolithic.bio$St_Area_NE, dates=neolithic.bio$CYrBPunc, sigma=neolithic.bio$Sigma)#
#####Intersect 14C dates by region#
antonio.regions <- readOGR("/Users/lee/Dropbox/4.2 ky event/jwp paper/Event42_areasIberia", "Event42_areasIberia")#
antonio.p1 <- as(antonio.regions, "SpatialPolygons")#
antonio.p1@data$id = rownames(antonio.p1@data)#
#
small.frame <- data.frame(all.data$Region, all.data$Site, all.data$Site.Type, all.data$Site.Type.Simple, all.data$Context..phase..etc.., all.data$Lat.in.Dec, all.data$Long.in.Dec, all.data$Sample.Lab.Number, all.data$X14C.Yr.BP.uncal, all.data$Sigma)#
colnames(small.frame) <- c("Region", "Site", "Details", "Type", "Context", "Latitude", "Longitude", "LabNumber", "Date", "Sigma")#
small.frame <- small.frame[!(is.na(small.frame$Latitude) | small.frame$Latitude==""), ]#
small.frame <- small.frame[!(is.na(small.frame$Longitude) | small.frame$Longitude==""), ]#
small.frame$Region <- sub("^$", "0", small.frame$Region)#
small.frame$Site <- sub("^$", "0", small.frame$Site)#
small.frame$Type <- sub("^$", "0", small.frame$Type)#
small.frame$Context <- sub("^$", "0", small.frame$Context)#
small.frame$LabNumber <- sub("^$", "0", small.frame$LabNumber)#
small.frame$Date <- sub("^$", "0", small.frame$Date)#
small.frame$Sigma <- sub("^$", "0", small.frame$Sigma)#
iberia.points <- data.frame(small.frame)#
#
coordinates(iberia.points) = ~Longitude+Latitude#
proj4string(iberia.points) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0")#
#
iberia.points <- spTransform(iberia.points, CRS("+proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs"))#
#
overlap <- over(iberia.points, antonio.regions)#
#
iberia.points@data$NewRegion <- overlap$Area_code#
iberia.point.var <- spTransform(iberia.points, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0"))#
iberia.data <- data.frame(iberia.points)#
iberia.data$Site <- as.character(iberia.data$Site)#
iberia.data2 <- data.frame(iberia.point.var)#
iberia.data2$NewRegion <- as.character(iberia.data2$NewRegion)#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SW", "Southwest")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SE", "Southeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="Mediterranean", "Northeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="North", "Northwest")#
iberia.col <- collapse.the.dates.new(sites=iberia.data2$Site, region=iberia.data2$NewRegion, context=iberia.data2$Type, lat=iberia.data2$Latitude, long=iberia.data2$Longitude, dates=iberia.data2$Date, sigma=iberia.data2$Sigma, datemin=1000, datemax=14000)#
#
spain <- get_map(location="Spain", zoom=6, maptype="terrain")#
#
Fig4 <- ggmap(spain, alpha=0.2) +#
geom_point(data=iberia.col, aes(x=Long, y=Lat, colour=Region, shape=Region), size=3, alpha=0.4)+#
coord_equal() +#
coord_map() +#
theme_tufte() +#
scale_x_continuous("Longitude") +#
scale_y_continuous("Latitude") +#
guides(size=FALSE, alpha=FALSE)#
#
ggsave(Fig4, , file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure 4.tiff", dpi=300, device="tiff")#
##########################
###Generalized Regions####
##########################
#
northwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northwest")#
southwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southwest")#
southeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southeast")#
meseta.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Meseta")#
northeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northeast")#
northwest.sig<- subset(iberia.col$Sigma, iberia.col$Region=="Northwest")#
southwest.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southwest")#
southeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southeast")#
meseta.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Meseta")#
northeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Northeast")#
#
northwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northwest"))#
southwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southwest"))#
southeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southeast"))#
meseta.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Meseta"))#
northeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northeast"))#
#
northwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northwest")#
southwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southwest")#
southeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southeast")#
meseta.lat <- subset(iberia.col$Lat, iberia.col$Region=="Meseta")#
northeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northeast")#
#
northwest.long <- subset(iberia.col$Long, iberia.col$Region=="Northwest")#
southwest.long <- subset(iberia.col$Long, iberia.col$Region=="Southwest")#
southeast.long <- subset(iberia.col$Long, iberia.col$Region=="Southeast")#
meseta.long <- subset(iberia.col$Long, iberia.col$Region=="Meseta")#
northeast.long <- subset(iberia.col$Long, iberia.col$Region=="Northeast")#
#
northwest.context <- subset(iberia.col$Context, iberia.col$Region=="Northwest")#
southwest.context <- subset(iberia.col$Context, iberia.col$Region=="Southwest")#
southeast.context <- subset(iberia.col$Context, iberia.col$Region=="Southeast")#
meseta.context <- subset(iberia.col$Context, iberia.col$Region=="Meseta")#
northeast.context <- subset(iberia.col$Context, iberia.col$Region=="Northeast")#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
southeast.intcal <- rep("intcal13", length(southeast.14C))#
meseta.intcal <- rep("intcal13", length(meseta.14C))#
northeast.intcal <- rep("intcal13", length(northeast.14C))#
northwest.names <- rep("North", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
southeast.names <- rep("Southeast", length(southeast.14C))#
meseta.names <- rep("Meseta", length(meseta.14C))#
northeast.names <- rep("Northeast", length(northeast.14C))#
northwest.sites<- subset(iberia.col$Site, iberia.col$Region=="Northwest")#
southwest.sites <- subset(iberia.col$Site, iberia.col$Region=="Southwest")#
southeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Southeast")#
meseta.sites <- subset(iberia.col$Site, iberia.col$Region=="Meseta")#
northeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Northeast")#
northwest.site.count <- length(unique(as.vector(northwest.sites)))#
southwest.site.count <- length(unique(southwest.sites))#
southeast.site.count <- length(unique(southeast.sites))#
meseta.site.count <- length(unique(meseta.sites))#
northeast.site.count <- length(unique(northeast.sites))#
#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
#
mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
simplify = simplify)#
#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) { #
samp.intcal <- rep("intcal13", length(x))#
samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
samp.ages <- ldply(samp.slugdens, data.frame)#
res.by <- by(samp.ages$ageGrid, samp.ages$.id, median) #
res.t <- t(res.by)#
samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
time <- seq(xmin+5, xmax-5, 10)#
samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
samp.hist <- hist(samp.grid, breaks=length(time))#
samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
colnames(samp.hist) <- c("Age", "Counts", "Density")#
#samp.hist <- arrange(samp.all, desc(Age))#
#
makeloess <- function(x, n){#
time <- seq(xmin+5, xmax-5, 10)#
samp.age <- sample(x, size=n, replace=TRUE)#
samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
samp.dist <- as.vector(samp.dist)#
samp.dist <- c(xmax, xmin, samp.dist)#
samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
samp.loess <- lowess(time, samp.date, f=0.15)#
samp.fitted <- samp.loess$y#
return(samp.fitted)#
}#
#
samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
samp.replicate <- as.data.frame(samp.replicate)#
samp.replicate[is.na(samp.replicate)] <- 0#
samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
#
samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
#
samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
#samp.descriptive <- arrange(samp.descriptive, desc(Age))#
samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
names(samp.all)[names(samp.all)=="time"] <- "Age"#
names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
samp.all <- arrange(samp.all, desc(Age))#
return(samp.all)#
}#
#
d#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
          samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess.old <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+1, xmax, 1)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.grid <- c(fill, samp.grid)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+1, xmax, 1)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(fill, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.cal.loess.trad <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.loess <- function(dates, sigma, sites, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    small.age.frame <- data.frame(samp.ages$.id, as.vector(samp.ages$ageGrid), as.vector(samp.ages$ageSds))#
    colnames(small.age.frame) <- c("Id", "ageGrid", "ageSDS")#
    samp.test <- aggregate(small.age.frame[,2:3], by=list(small.age.frame$Id), FUN=median)#
    colnames(samp.test) <- c("Id", "Mean", "SD")#
    samp.test$Min <- samp.test$Mean-samp.test$SD#
    samp.test$Max <- samp.test$Mean+samp.test$SD#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    samp.age.grid <- subset(samp.age.grid, !(xmin > samp.age.grid | samp.age.grid > xmax))#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(c(samp.grid, xmin, xmax), breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(a.frame, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.id <- as.vector(sample(as.vector(a.frame$Id), size=n, replace=TRUE))#
        t.frame <- data.frame(t(a.frame))#
        colnames(t.frame) <- a.frame$Id#
        s.t.frame <- t.frame[,samp.id]#
        f.frame <- data.frame(t(s.t.frame))#
        #f.frame <- data.table(f.frame)#
        small.frame <- data.frame(f.frame$Id, f.frame$Min, f.frame$Max)#
        colnames(small.frame) <- c("Id", "Min", "Max")#
        small.list <- split(as.vector(small.frame[,2:3]), f=small.frame$Id)#
        small.list <- lapply(small.list, function(x) as.vector(x[1,]))#
        seq.gen <- function(a.frame) {#
            a.frame <- as.data.frame(a.frame)#
            at.vector <- as.numeric(as.vector(as.data.frame(t(a.frame))[,1]))#
            sequence <- seq(from=at.vector[1], to=at.vector[2], by=1)#
            return(sequence)#
        }#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- ldply(all.seq, data.frame)[,2]#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- as.vector(tapply(samp.dist, cut(samp.dist, length(time)), length))#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- as.vector(ldply(all.seq, data.frame)[,2])#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(samp.test, reps)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
stack.14C.taxa.old <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma*2#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma*2#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#######
stack.14C <- function(x, sigma, xmin, xmax, taxa){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
taphonomic.correct <- function(stack.14C.data) {#
    df <- stack.14C.data#
    n.t <- 5.726442*(10^6)*(df$Age + 2176.4)^-1.3925309#
    lambda <- 1.3925309/(2176.4+df$Age)*100#
    lambda.r <- 1-lambda#
    n.t.relative <- n.t/128.8192#
    df$Counts.Corrected <-df$Counts/n.t.relative#
    count.mod.sum <- sum(df$Counts.Corrected)#
    df$Density.Corrected <- df$Counts.Corrected/count.mod.sum#
    return(df)#
}#
criterion.data.null <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !stack.14C.taxa.object$Taxa==criteria.names)#
    ageGrids <- c(temp.df.1$ageGrid, temp.df.2$ageGrid)#
    Taxa <- c(as.vector(temp.df.1$Taxa), rep("Other", length(temp.df.2$ageGrid)))#
    temp.df <- data.frame(ageGrids, Taxa)#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
criterion.data.old <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, corrected.samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)), even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    colnames(temp.df.alt) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    temp.list.alt <- split(temp.df.alt$ageGrid, f=temp.df.alt$Taxa)#
    temp.list.alt <- rapply(temp.list.alt, f=sort, how="list", decreasing=TRUE)#
    samp.hist.list.alt <- rapply(temp.list.alt, f=hist, how="list", breaks=length(time))#
    samp.mids.alt <- sapply(samp.hist.list.alt, "[[", 4)#
    samp.counts.alt <- sapply(samp.hist.list.alt, "[[", 2)#
    samp.density.alt <- sapply(samp.hist.list.alt, "[[", 3)#
    samp.mids.df.alt <- ldply(samp.mids.alt, data.frame)#
    samp.counts.df.alt <- ldply(samp.counts.alt, data.frame)#
    samp.density.df.alt <- ldply(samp.density.alt, data.frame)#
    hist.alt <- hist(temp.df.alt$ageGrid, breaks=length(time))#
    samp.mids.alt <- hist.alt$mids#
    samp.counts.alt <- hist.alt$counts#
    count.sum <- sum(samp.counts.alt)#
    samp.density.alt <- hist.alt$density#
    samp.names.alt <- rep("Total", length(samp.mids.alt))#
    samp.hist <- data.frame(c(samp.mids.df[,1], samp.names.alt), as.numeric(as.vector(c(samp.mids.df[,2], samp.mids.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt)))/count.sum)#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)),#
        as.numeric(as.vector(even.more.corrected.samp.hist$Freq))/count.sum,#
        even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Density", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data.test <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    df <- data.frame(c(temp.df.1$ageGrid, temp.df.2$ageGrid), c(as.vector(temp.df.1$Taxa), rep("Total", length(temp.df.2$ageGrid))))#
    colnames(df) <- c("ageGrid", "Taxa")#
    return(df)#
}#
median.stack.14C.half <- function(x, sigma, sites, context, xmin, xmax){#
    intcal13 <- intcal.13#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(as.numeric(as.vector(x)), as.numeric(as.vector(sigma)), samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    small.frame <- data.frame(medians.all, sites, context)#
    colnames(small.frame) <- c("Median", "Site", "Context")#
    #medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    small.frame <- subset(small.frame, !(small.frame$Median > xmax | small.frame$Median < xmin))#
    return(small.frame)#
}
####Taxa Analysis#
northwest.stack <- stack.14C.taxa(date=northwest.14C, sigma=northwest.sig, xmin=0, xmax=12000, lat=northwest.lat, long=northwest.long, taxa=northwest.taxa)#
southwest.stack <- stack.14C.taxa(date=southwest.14C, sigma=southwest.sig, xmin=2000, xmax=12000, lat=southwest.lat, long=southwest.long, taxa=southwest.taxa)#
southeast.stack <- stack.14C.taxa(date=southeast.14C, sigma=southeast.sig, xmin=2000, xmax=12000, lat=southeast.lat, long=southeast.long, taxa=southeast.taxa)#
meseta.stack <- stack.14C.taxa(date=meseta.14C, sigma=meseta.sig, xmin=2000, xmax=12000, lat=meseta.lat, long=meseta.long, taxa=meseta.taxa)#
northeast.stack <- stack.14C.taxa(date=northeast.14C, sigma=northeast.sig, xmin=2000, xmax=12000, lat=northeast.lat, long=northeast.long, taxa=northeast.taxa)#
#
northwest.criterion <- criterion.data(northwest.stack, criteria.names=c("Mortuary", "Settlement"), xmin=0, xmax=12000)#
southwest.criterion <- criterion.data(southwest.stack, criteria.names=c("Mortuary",  "Settlement"), xmin=0, xmax=12000)#
southeast.criterion <- criterion.data(southeast.stack, criteria.names=c("Mortuary",  "Settlement"), xmin=0, xmax=12000)#
meseta.criterion <- criterion.data(meseta.stack, criteria.names=c("Mortuary", "Settlement"), xmin=0, xmax=12000)#
northeast.criterion <- criterion.data(northeast.stack, criteria.names=c("Mortuary",  "Settlement"), xmin=0, xmax=12000)
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
southwest.sub.plot <- ggplot(southwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southwest")#
ggsave(southwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure18.tiff", dpi=300, device="tiff", width=10, height=7)#
southeast.sub.plot <- ggplot(southeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southeast")#
ggsave(southeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure20.tiff", dpi=300, device="tiff", width=10, height=7)#
meseta.sub.plot <- ggplot(meseta.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Meseta")#
ggsave(meseta.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure9.tiff", dpi=300, device="tiff", width=10, height=7)#
northeast.sub.plot <- ggplot(northeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8) +#
scale_colour_grey(start = .2, end = .8) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northeast")#
ggsave(northeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure16.tiff", dpi=300, device="tiff", width=10, height=7)
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion[order(northwest.criterion$Taxa),]) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(rev(northwest.criterion[order(northwest.criterion$Taxa),])) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
northwest.sub.plot
?order
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion[order(northwest.criterion$Taxa, decreasing=TRUE),]) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion[order(northwest.criterion$Taxa, decreasing=FALSE),]) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=(factor(Taxa)), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
)
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)
)
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)
northwest.sub.plot
northwest.criterion$Taxa <- factor(northwest.criterion$northwest.criterion, levels = c("Mortuary", "Settlement", "Total"))
ls(northwest.criterion)
northwest.criterion$Taxa <- factor(northwest.criterion$Taxa, levels = c("Mortuary", "Settlement", "Total"))
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")
northwest.sub.plot
northwest.criterion$Taxa <- factor(northwest.criterion$Taxa, levels = c("Total", "Settlement", "Mortuary"))#
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=rev(factor(Taxa)), fill=rev(factor(Taxa)), position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=rev(factor(Taxa)), position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)
northwest.sub.plot
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
    quartz<-function() windows()#
}#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
library(bcp)#
library(rgdal)#
library(ncdf4)#
library(date)#
library(RNetCDF)#
library(rasterVis)#
library(mapmate)#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
####Function to organize plots in a window#
layOut = function(...) {#
    require(grid)#
    x <- list(...)#
    n <- max(sapply(x, function(x) max(x[[2]])))#
    p <- max(sapply(x, function(x) max(x[[3]])))#
    pushViewport(viewport(layout = grid.layout(n, p)))#
    for (i in seq_len(length(x))) {#
        print(x[[i]][[1]], vp = viewport(layout.pos.row = x[[i]][[2]],#
        layout.pos.col = x[[i]][[3]]))#
    }#
}#
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
collapse.the.dates.taxa <- function(sites, biogeo, general, dates, sigma, taxa) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma", "Taxa")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
####Function to organize plots in a window#
layOut = function(...) {#
    require(grid)#
    x <- list(...)#
    n <- max(sapply(x, function(x) max(x[[2]])))#
    p <- max(sapply(x, function(x) max(x[[3]])))#
    pushViewport(viewport(layout = grid.layout(n, p)))#
    for (i in seq_len(length(x))) {#
        print(x[[i]][[1]], vp = viewport(layout.pos.row = x[[i]][[2]],#
        layout.pos.col = x[[i]][[3]]))#
    }#
}#
#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 0,scientific = FALSE)#
}#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
    mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
    simplify = simplify)#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.age <- sample(x, size=n, replace=TRUE)#
        samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
taphonomic.correct <- function(stack.14C.data) {#
    df <- stack.14C.data#
    n.t <- 5.726442*(10^6)*(df$Age + 2176.4)^-1.3925309#
    lambda <- 1.3925309/(2176.4+df$Age)*100#
    lambda.r <- 1-lambda#
    n.t.relative <- n.t/128.8192#
    df$Counts.Corrected <-df$Counts/n.t.relative#
    count.mod.sum <- sum(df$Counts.Corrected)#
    df$Density.Corrected <- df$Counts.Corrected/count.mod.sum#
    return(df)#
}#
#
stack.14C.4D <- function(date, sigma, xmin, xmax, lat, long){#
    date <- c(date, 100)#
    sigma <- c(sigma, 50)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    date.frame <- data.frame(date, sigma, lat, long)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long)#
    names(coord.sub) <- c(".id", "Lat", "Long")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#######
stack.14C <- function(x, sigma, xmin, xmax, taxa){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- as.numeric(as.vector(c(date, 49000)))#
    sigma <- as.numeric(as.vector(c(sigma, 4900)))#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- as.vector(c(taxa, "blank"))#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin) < Date & Date < (xmax))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#
taxa.data <- function(stack.14C.taxa.object, taxa.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==taxa.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, factor(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
#
taxa.data.single <- function(stack.14C.taxa.object, taxa.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==taxa.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, factor(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.counts.df[1], samp.density.df[1])#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
median.stack.14C <- function(x, sigma, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    n <- length(medians.all)#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd, samp.ages$.id)#
    colnames(samp.frame) <- c("Mean", "Sd", "Id")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma*2#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma*2#
    id.frame <- samp.frame[, list(Id=Id, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    colnames(id.frame) <- c("Id", "ageGrid")#
    res.by <- by(samp.frame$ageGrid, samp.frame$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.frame$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess.bad <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd, samp.ages$.id)#
    colnames(samp.frame) <- c("Mean", "Sd", "Id")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma*2#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma*2#
    id.frame <- samp.frame[, list(Id=Id, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    colnames(id.frame) <- c("Id", "ageGrid")#
    res.by <- by(samp.frame$ageGrid, samp.frame$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.frame$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
        samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
####Function to maintain significant digits in plot#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
collapse.the.dates.begin <- function(sites, region, taxa, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df.1 <- data.frame(sites, region, dates, sigma, lat, long)#
    colnames(df.1) <- c("Site", "Region", "X14C.year", "Sigma", "Lat", "Long")#
    df <- subset(df.1, df.1$X14C.year < datemax & df.1$X14C.year > datemin)#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),3]-df[2:nrow(df), 3]))/((sqrt(df[2:nrow(df), 4]^2 + df[1:(nrow(df)-1),4]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),7], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
collapse.the.dates.taxa <- function(sites, region, taxa, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df.1 <- data.frame(sites, region, dates, sigma, lat, long, taxa)#
    colnames(df.1) <- c("Site", "Region", "X14C.year", "Sigma", "Lat", "Long", "Taxa")#
    df <- subset(df.1, df.1$X14C.year < datemax & df.1$X14C.year > datemin)#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),3]-df[2:nrow(df), 3]))/((sqrt(df[2:nrow(df), 4]^2 + df[1:(nrow(df)-1),4]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#
site.median <- function(sites, region, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, dates, sigma)#
    colnames(df) <- c("Site", "Region", "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Region))#
    df <- arrange(df, desc(Site))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(df[nrow(df)] > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
site.time <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
}#
median.stack.14C <- function(dates, sigma, sites, xmin, xmax, time){#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    median.simple <- round((medians/100000), digits=2)*100000#
    median.table <- table(median.simple)#
    median.values <- as.numeric(paste(median.table))#
    median.frame <- data.frame(t(median.values))#
    colnames(median.frame) <- names(median.table)#
    median.t <- data.frame(t(median.frame))#
    median.df <- data.frame(add_rownames(median.t, "VALUE"))#
    colnames(median.df) <- c("Millenium", "Site")#
    median.df <- median.df[with(median.df, order(as.numeric(Millenium))), ]#
    null <- rep(0, length(time))#
    null.frame <- t(data.frame(null))#
    colnames(null.frame) <- time#
    null.t <- data.frame(t(null.frame))#
    null.df <- data.frame(add_rownames(null.t, "VALUE"))#
    colnames(null.df) <- c("Millenium", "Site")#
    all.frame <- merge(null.df, median.df, all=TRUE, by="Millenium")#
    all.frame[is.na(all.frame)] <- 0#
    all.frame <- all.frame[with(all.frame, order(as.numeric(Millenium))), ]#
    the.result <- data.frame(all.frame$Millenium, all.frame$Site.y)#
    colnames(the.result) <- c("Millenium", "Sites")#
    scaled <- as.vector(apply(data.frame(the.result$Sites), 2, function(x) scale(x)))#
    scaled.mean <- mean(scaled)#
    scaled.sd <- sd(scaled)#
    the.result$z.score <- (scaled-scaled.mean)/scaled.sd#
    the.result$p.value <- pnorm(the.result$z.score, lower.tail=FALSE)#
    return(format(the.result, digits=2))#
}#
site.time.half <- function(sites, dates, sigma, xmin, xmax, time) {#
    df <- data.frame(sites, dates, sigma)#
    colnames(df) <- c("Site",  "X14C.year", "Sigma")#
    df <- arrange(df, desc(X14C.year))#
    df <- arrange(df, desc(Site))#
    site.frame <- aggregate(x=df$X14C.year, by=list(df$Site), FUN=mean)#
    site.vector <- site.frame$x#
    site.frame.sig <- aggregate(x=df$Sigma, by=list(df$Site), FUN=mean)#
    site.vector.sig <- site.frame.sig$x#
    samp.intcal <- rep("intcal13", length(site.vector))#
    samp.slugdens <- BchronCalibrate(site.vector, site.vector.sig, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}#
median.stack.14C.half <- function(x, sigma, sites, xmin, xmax){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    return(medians)#
}
######Climate Data Series#
nao.index <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/NAO/NAO Index-Table 1.csv")#
nao.index <- arrange(nao.index, Year)#
nao.bcp <- bcp(nao.index$NAO, nao.index$Year, burnin=2000, mcmc=10000)#
#
nao.bcp.frame <- data.frame(nao.index$Year, nao.index$NAO, nao.bcp$posterior.mean, nao.bcp$posterior.prob, nao.bcp$posterior.var)#
colnames(nao.bcp.frame) <- c("Year", "NAO", "PosteriorMean", "PosteriorProb", "PosteriorVar")#
#
roman.nao <- ggplot(nao.bcp.frame) +#
geom_text(aes(x=40, y=1.8, label="Pax Romana"))+#
geom_text(aes(x=270, y=2.3, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=4, fill="grey90", alpha=0.3)+#
geom_text(aes(x=-106, y=-1.4, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=4, fill="grey90", alpha=0.3)+#
geom_text(aes(x=175, y=-1.4, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=4, fill="grey90", alpha=0.3)+#
geom_text(aes(x=376, y=-1.4, label="Gothic Migration"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=4, fill="grey90", alpha=0.3)+#
geom_text(aes(x=550, y=-1.4, label="Migration Period"))+#
geom_point(aes(Year, NAO))+#
geom_line(aes(Year, NAO), linetype=2)+#
geom_line(aes(Year, PosteriorMean), lwd=1.1)+#
geom_line(aes(Year, PosteriorMean), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-400, 800), breaks=seq(-400, 800, 100)) +#
scale_y_continuous("NAO Index", limits = c(-1.5, 3), labels=fmt()) +#
theme_light()#
#
roman.prob <- ggplot(nao.bcp.frame) +#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-2.3, ymax=2.8, fill="grey90", alpha=0.3)+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-2.3, ymax=2.8, fill="grey90", alpha=0.3)+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-2.3, ymax=2.8, fill="grey90", alpha=0.3)+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-2.3, ymax=2.8, fill="grey90", alpha=0.3)+#
geom_line(aes(Year, PosteriorProb), lwd=1.1) +#
geom_line(aes(Year, PosteriorProb), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-400, 800), breaks=seq(-400, 800, 100)) +#
scale_y_continuous("Probability") +#
theme_light()#
mccormick <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/McCormick et al 2012 Geodatabase Historical Evidence on Roman Post-Roman Climate/Climate events in written records, 86 BC-800 AD-Table 1.csv")#
famine <- subset(mccormick, mccormick$What.code=="fa")#
famine.hist <- hist(famine$When.1, breaks=80)#
famine.frame <- data.frame(famine.hist$mids, famine.hist$counts)#
colnames(famine.frame) <- c("Year", "Count")#
#
famine.record <- ggplot(famine.frame) +#
geom_line(aes(Year, Count)) +#
#geom_text(aes(x=40, y=-27.8, label="Pax Romana"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=-106, y=-1.5, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=175, y=-1.5, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=376, y=-1.5, label="Gothic Migration"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=550, y=-1.5, label="Migration Period"))+#
geom_line(aes(Year, Count), lwd=1.1)+#
geom_line(aes(Year, Count), colour="light blue", lwd=0.5) +#
#geom_text(aes(x=270, y=-30.2, label="Imperial Crisis"))+#
scale_x_continuous("Year BC/AD", limits = c(-400, 800), breaks=seq(-400, 800, 100)) +#
scale_y_continuous("Decadal Famine", limits=c(0, 10), breaks=seq(0, 10, 2)) +#
theme_light()#
drought <- subset(mccormick, mccormick$What.code=="d")#
drought.hist <- hist(drought$When.1, breaks=80)#
drought.frame <- data.frame(drought.hist$mids, drought.hist$counts)#
colnames(drought.frame) <- c("Year", "Count")#
#
drought.record <- ggplot(drought.frame) +#
geom_line(aes(Year, Count)) +#
#geom_text(aes(x=40, y=-27.8, label="Pax Romana"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=-106, y=-1.5, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=175, y=-1.5, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=376, y=-1.5, label="Gothic Migration"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=550, y=-1.5, label="Migration Period"))+#
geom_line(aes(Year, Count), lwd=1.1)+#
geom_line(aes(Year, Count), colour="light blue", lwd=0.5) +#
#geom_text(aes(x=270, y=-30.2, label="Imperial Crisis"))+#
scale_x_continuous("Year BC/AD", limits = c(-400, 800), breaks=seq(-400, 800, 100)) +#
scale_y_continuous("Decadal Drought", limits=c(0, 6)) +#
theme_light()#
ggsave(layOut(#
list(roman.nao, 1:76, 16:1000),#
list(roman.prob, 67:104, 1:1000),#
list(drought.record, 95:150, 16:1000),#
list(famine.record, 142:200, 14:1000)#
), file="/Users/lee/Dropbox/Documents/GISP and Civilization/NAORome2.tiff", device="tiff", dpi=300, width=10, height=8)#
ggsave(roman.nao, file="/Users/lee/Dropbox/Documents/GISP and Civilization/NAORome.tiff", device="tiff", dpi=300)#
###GISP2 Northern Hemisphere Temperatures#
#
gisp2 <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/gisp2.csv")#
#
roman.gisp2 <- ggplot(gisp2) +#
geom_line(aes(1950-Age, Temperature..C.))+#
geom_text(aes(x=40, y=-30, label="Pax Romana"))+#
geom_text(aes(x=270, y=-30.2, label="Imperial Crisis"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
geom_text(aes(x=-106, y=-32.3, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
geom_text(aes(x=175, y=-32.3, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
geom_text(aes(x=376, y=-32.3, label="Gothic Migration"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
geom_text(aes(x=550, y=-32.3, label="Migration Period"))+#
geom_line(aes(1950-Age, Temperature..C.), lwd=1.1)+#
geom_line(aes(1950-Age, Temperature..C.), colour="light blue", lwd=0.5) +#
scale_x_continuous("Year BC/AD", limits = c(-400, 800), breaks=seq(-400, 800, 100)) +#
scale_y_continuous("Temperature (C)", limits = c(-32.5, -29.5)) +#
theme_light()#
#
ggsave(roman.gisp2, file="/Users/lee/Dropbox/Documents/GISP and Civilization/GISP2.tiff", device="tiff", dpi=300, width=10.2, height=4.39, compression = "lzw")#
####Lake Holzemaar#
holzmaar <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/holzmaar2003/Data-Table 1.csv")#
holzmaar.record <- ggplot(holzmaar) +#
geom_line(aes(Year, d13C.Organic..per.mil.VPDB.))+#
#geom_text(aes(x=40, y=-27.8, label="Pax Romana"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=-106, y=-35, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=175, y=-35, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=376, y=-35, label="Gothic Migration"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=550, y=-35, label="Migration Period"))+#
geom_line(aes(Year, d13C.Organic..per.mil.VPDB.), lwd=1.1)+#
geom_line(aes(Year, d13C.Organic..per.mil.VPDB.), colour="light blue", lwd=0.5) +#
#geom_text(aes(x=270, y=-30.2, label="Imperial Crisis"))+#
scale_x_continuous("Year BC/AD", limits = c(-400, 800), breaks=seq(-400, 800, 100)) +#
scale_y_continuous(expression(paste("Org. δ"^13*"C (‰ VPDB)")), limits = c(-35, -27)) +#
theme_light()#
#
ggsave(holzmaar.record, file="/Users/lee/Dropbox/Documents/GISP and Civilization/Holzmaar.tiff", device="tiff", dpi=300, width=10.2, height=4.39, compression = "lzw")#
###Buntgen#
buentgen <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/buentgen2011europe/Fig.4 Recons-Table 1.csv")#
buentgen.record <- ggplot(buentgen) +#
geom_line(aes(Year, SMA(Buentgen_etal.Science2011_JJA.temp, 10)))+#
#geom_text(aes(x=40, y=-27.8, label="Pax Romana"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=-106, y=-35, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=175, y=-35, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=376, y=-35, label="Gothic Migration"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-35, ymax=2.8, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=550, y=-35, label="Migration Period"))+#
geom_line(aes(Year, SMA(Buentgen_etal.Science2011_JJA.temp, 10)), lwd=1.1)+#
geom_line(aes(Year, SMA(Buentgen_etal.Science2011_JJA.temp, 10)), colour="light blue", lwd=0.5) +#
#geom_text(aes(x=270, y=-30.2, label="Imperial Crisis"))+#
scale_x_continuous("Year BC/AD", limits = c(-400, 800), breaks=seq(-400, 800, 100)) +#
scale_y_continuous("JJA Temp", limits=c(-3.75, 2.6), breaks=seq(-2, 2, 2)) +#
theme_light()#
#
ggsave(buentgen.record, file="/Users/lee/Dropbox/Documents/GISP and Civilization/Buentgen.tiff", device="tiff", dpi=300, width=10.2, height=4.39, compression = "lzw")#
#
fennoscandinavia <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/fennoscandia2012temperature/Fusion Temp.-Table 1.csv")#
#
fennoscandinavia.record <- ggplot(fennoscandinavia) +#
geom_line(aes(YEAR, SMA(Fussion.T, 10)))+#
#geom_text(aes(x=40, y=-27.8, label="Pax Romana"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-35, ymax=7, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=-106, y=-1.5, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-35, ymax=7, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=175, y=-1.5, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-35, ymax=7, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=376, y=-1.5, label="Gothic Migration"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-35, ymax=7, fill="grey90", alpha=0.3)+#
#geom_text(aes(x=550, y=-1.5, label="Migration Period"))+#
geom_line(aes(YEAR, SMA(Fussion.T, 10)), lwd=1.1)+#
geom_line(aes(YEAR, SMA(Fussion.T, 10)), colour="light blue", lwd=0.5) +#
#geom_text(aes(x=270, y=-30.2, label="Imperial Crisis"))+#
scale_x_continuous("Year BC/AD", limits = c(-400, 800), breaks=seq(-400, 800, 100)) +#
scale_y_continuous("July Temperature", limits=c(-1.5, 3)) +#
theme_light()#
mccormick <- read.csv(file="/Users/lee/Dropbox/Documents/GISP and Civilization/McCormick et al 2012 Geodatabase Historical Evidence on Roman Post-Roman Climate/Climate events in written records, 86 BC-800 AD-Table 1.csv")#
nile <- subset(mccormick, mccormick$What.code=="n")#
nile.hist <- hist(nile$When.1, breaks=80)#
nile.frame <- data.frame(nile.hist$mids, nile.hist$counts)#
colnames(nile.frame) <- c("Year", "Count")#
nile.record <- ggplot(nile.frame) +#
geom_line(aes(Year, Count)) +#
#geom_text(aes(x=40, y=-27.8, label="Pax Romana"))+#
geom_rect(aes(NULL, NULL), xmin=-113, xmax=-101, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=-106, y=-1.5, label="Cimbrian War"))+#
geom_rect(aes(NULL, NULL), xmin=166, xmax=180, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=175, y=-1.5, label="Marcomannic War"))+#
geom_rect(aes(NULL, NULL), xmin=376, xmax=410, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=376, y=-1.5, label="Gothic Migration"))+#
geom_rect(aes(NULL, NULL), xmin=500, xmax=600, ymin=-35, ymax=15, fill="grey90", alpha=0.3)+#
geom_text(aes(x=550, y=-1.5, label="Migration Period"))+#
geom_line(aes(Year, Count), lwd=1.1)+#
geom_line(aes(Year, Count), colour="light blue", lwd=0.5) +#
#geom_text(aes(x=270, y=-30.2, label="Imperial Crisis"))+#
scale_x_continuous("Year BC/AD", limits = c(-400, 800), breaks=seq(-400, 800, 100)) +#
scale_y_continuous("Decadal Nile Flood", limits=c(0, 10), breaks=seq(0, 10, 2)) +#
theme_light()#
ggsave(layOut(#
list(roman.gisp2, 1:62, 7:1000),#
list(holzmaar.record, 50:112, 1:1000),#
list(nile.record, 100:162, 15:1000),#
list(buentgen.record, 150:212, 15:1000),#
list(fennoscandinavia.record, 200:262, 15:1000)#
), file="/Users/lee/Dropbox/Documents/GISP and Civilization/GermanyClimProxies.tiff", device="tiff", dpi=300, width=10, height=8)
library(shiny)
runApp("~/GitHub/xrf-app")
flores <- read.csv(file="~/Google Drive/Liang Bua XRF/Liang Bua/Combined-Net Photons.csv")#
flores.stat <- read.csv(file="~/Google Drive/Liang Bua XRF/Liang Bua/Combined-Net Photons Stat.csv")#
flores.no.mix <- read.csv(file="~/Google Drive/Liang Bua XRF/Liang Bua/Combined-Net Photons XXI.csv")#
flores.no.mix.stat <- read.csv(file="~/Google Drive/Liang Bua XRF/Liang Bua/Combined-Net Photons XXI Stat.csv")
lm_eqn = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
        eq <- substitute(italic(C)[i] == a + b %.% italic(I)[i]*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#
lm_eqn_poly = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    c = format(abs(coef(m)[3]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
        eq <- substitute(italic(C)[i] == a + c %.% italic(I)[i]^2 + b %.% italic(I)[i]*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}
####All#
U <- flores$U.L1#
Y <- flores $Y.K12#
Nd <- flores $Nd.L12#
spit <- flores $Spit
quartz()#
U.plot <- qplot(Spit, U.L1, data=flores, xlab = "Spit", ylab = "Uranium Net Photons", colour = Unit, shape= Unit) + theme_bw() + stat_smooth(method="lm")#
U.plot
quartz()#
Y.plot <- qplot(Spit, Y.K12, data=flores, xlab = "Spit", ylab = "Yttrium Net Photons", colour = Unit, shape= Unit) + theme_bw() + stat_smooth(method="lm")#
Y.plot
###Iron-Titanium Plot#
quartz()#
fe.ti <- qplot(Fe.K12, Ti.K12, data=flores.no.mix, xlab = "Iron Net Photons", ylab = "Titanium Net Photons" ) + #
theme_bw() + #
stat_smooth(method="glm", formula = y~poly(x, 3))#
fe.ti
#####Comp Plot#
quartz()#
this <- qplot(Split, I.K12, data = flores, xlab = "Split", ylab = "% Element Relative Photons") + #
geom_point(aes(Split, I.K12, colour = "I")) + #
geom_point(aes(Split, La.L1, colour = "La")) + #
geom_point(aes(Split, Nd.L1, colour = "Nd")) + #
geom_point(aes(Split, Y.K12, colour = "Y")) + #
geom_point(aes(Split, Yb.L1, colour = "Yb")) + #
geom_point(aes(Split, U.L1, colour = "U")) + #
geom_line(aes(Split, I.K12, colour = "I")) + #
geom_line(aes(Split, La.L1, colour = "La")) + #
geom_line(aes(Split, Nd.L1, colour = "Nd")) + #
geom_line(aes(Split, Y.K12, colour = "Y")) + #
geom_line(aes(Split, Yb.L1, colour = "Yb")) + #
geom_line(aes(Split, U.L1, colour = "U")) + #
 scale_colour_manual("", #
                      breaks = c("I", "La", "Nd", "Y", "Yb", "U"), #
                      values = c("brown", "green", "purple", "blue", "red", "orange", "yellow" )) +#
theme_bw()#
this
#####Comp Plot#
quartz()#
this <- qplot(Spit, I.K12, data = flores, xlab = "Split", ylab = "% Element Relative Photons") +#
geom_point(aes(Spit, I.K12, colour = "I")) +#
geom_point(aes(Spit, La.L1, colour = "La")) +#
geom_point(aes(Spit, Nd.L1, colour = "Nd")) +#
geom_point(aes(Spit, Y.K12, colour = "Y")) +#
geom_point(aes(Spit, Yb.L1, colour = "Yb")) +#
geom_point(aes(Spit, U.L1, colour = "U")) +#
geom_line(aes(Spit, I.K12, colour = "I")) +#
geom_line(aes(Spit, La.L1, colour = "La")) +#
geom_line(aes(Spit, Nd.L1, colour = "Nd")) +#
geom_line(aes(Spit, Y.K12, colour = "Y")) +#
geom_line(aes(Spit, Yb.L1, colour = "Yb")) +#
geom_line(aes(Spit, U.L1, colour = "U")) +#
 scale_colour_manual("", #
                      breaks = c("I", "La", "Nd", "Y", "Yb", "U"), #
                      values = c("brown", "green", "purple", "blue", "red", "orange", "yellow" )) +#
theme_bw()#
this
#####Comp Plot#
quartz()#
this <- qplot(Spit, I.K12, data = flores, xlab = "Split", ylab = "% Element Relative Photons") +#
geom_point(aes(Spit, I.K12, colour = "I")) +#
#geom_point(aes(Spit, La.L1, colour = "La")) +#
geom_point(aes(Spit, Nd.L1, colour = "Nd")) +#
geom_point(aes(Spit, Y.K12, colour = "Y")) +#
geom_point(aes(Spit, Yb.L1, colour = "Yb")) +#
geom_point(aes(Spit, U.L1, colour = "U")) +#
geom_line(aes(Spit, I.K12, colour = "I")) +#
geom_line(aes(Spit, La.L1, colour = "La")) +#
geom_line(aes(Spit, Nd.L1, colour = "Nd")) +#
geom_line(aes(Spit, Y.K12, colour = "Y")) +#
geom_line(aes(Spit, Yb.L1, colour = "Yb")) +#
geom_line(aes(Spit, U.L1, colour = "U")) +#
 scale_colour_manual("", #
                      breaks = c("I", "La", "Nd", "Y", "Yb", "U"), #
                      values = c("brown", "green", "purple", "blue", "red", "orange", "yellow" )) +#
theme_bw()#
this
#####Comp Plot#
quartz()#
this <- qplot(Spit, I.K12, data = flores, xlab = "Split", ylab = "% Element Relative Photons") +#
geom_point(aes(Spit, I.K12, colour = "I")) +#
#geom_point(aes(Spit, La.L1, colour = "La")) +#
geom_point(aes(Spit, Nd.L1, colour = "Nd")) +#
geom_point(aes(Spit, Y.K12, colour = "Y")) +#
#geom_point(aes(Spit, Yb.L1, colour = "Yb")) +#
geom_point(aes(Spit, U.L1, colour = "U")) +#
geom_line(aes(Spit, I.K12, colour = "I")) +#
geom_line(aes(Spit, La.L1, colour = "La")) +#
geom_line(aes(Spit, Nd.L1, colour = "Nd")) +#
geom_line(aes(Spit, Y.K12, colour = "Y")) +#
geom_line(aes(Spit, Yb.L1, colour = "Yb")) +#
geom_line(aes(Spit, U.L1, colour = "U")) +#
 scale_colour_manual("", #
                      breaks = c("I", "La", "Nd", "Y", "Yb", "U"), #
                      values = c("brown", "green", "purple", "blue", "red", "orange", "yellow" )) +#
theme_bw()#
this
#####Comp Plot#
quartz()#
this <- qplot(Spit, I.K12, data = flores, xlab = "Split", ylab = "% Element Relative Photons") +#
geom_point(aes(Spit, I.K12, colour = "I")) +#
#geom_point(aes(Spit, La.L1, colour = "La")) +#
geom_point(aes(Spit, Nd.L1, colour = "Nd")) +#
geom_point(aes(Spit, Y.K12, colour = "Y")) +#
#geom_point(aes(Spit, Yb.L1, colour = "Yb")) +#
geom_point(aes(Spit, U.L1, colour = "U")) +#
geom_line(aes(Spit, I.K12, colour = "I")) +#
#geom_line(aes(Spit, La.L1, colour = "La")) +#
geom_line(aes(Spit, Nd.L1, colour = "Nd")) +#
geom_line(aes(Spit, Y.K12, colour = "Y")) +#
#geom_line(aes(Spit, Yb.L1, colour = "Yb")) +#
geom_line(aes(Spit, U.L1, colour = "U")) +#
 scale_colour_manual("", #
                      breaks = c("I", "La", "Nd", "Y", "Yb", "U"), #
                      values = c("brown", "green", "purple", "blue", "red", "orange", "yellow" )) +#
theme_bw()#
this
quartz()#
Y.plot <- qplot(Spit, Y.K12, data=flores, xlab = "Spit", ylab = "Yttrium Net Photons") + theme_bw() + stat_smooth(method="lm", formula=y~x^2)#
Y.plot
quartz()#
U.plot <- qplot(Spit, U.L1, data=flores, xlab = "Spit", ylab = "Uranium Net Photons") + theme_bw() + stat_smooth(method="lm", formula=y~x^2)#
U.plot
quartz()#
U.plot <- qplot(U.L1, Spit, data=flores, xlab = "Spit", ylab = "Uranium Net Photons") + theme_bw() + stat_smooth(method="lm", formula=y~x^2)#
U.plot
quartz()#
U.plot <- qplot(U.L1, Spit, data=flores, ylab = "Spit", xlab = "Uranium Net Photons") + theme_bw() + stat_smooth(method="glm", formula=y~x^2)#
U.plot
quartz()#
U.plot <- qplot(U.L1, Spit, data=flores, ylab = "Spit", xlab = "Uranium Net Photons") + theme_bw() + stat_smooth(method="glm", formula=y~x^2+x)#
U.plot
quartz()#
U.plot <- qplot(U.L1, Spit, data=flores, ylab = "Spit", xlab = "Uranium Net Photons") + theme_bw() + stat_smooth(method="glm", formula=y~poly(x, 2))#
U.plot
?stat_smooth
quartz()#
U.plot <- qplot(U.L1, Spit, data=flores, ylab = "Spit", xlab = "Uranium Net Photons") +#
theme_bw() +#
stat_smooth(method="glm", formula=y~poly(x, 2)) +#
annotate("text", label=lm_eqn_poly(lm(Spit~U.K12/300, flores)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
U.plot
quartz()#
U.plot <- qplot(U.L1, Spit, data=flores, ylab = "Spit", xlab = "Uranium Net Photons") +#
theme_bw() +#
stat_smooth(method="glm", formula=y~poly(x, 2)) +#
annotate("text", label=lm_eqn_poly(lm(Spit~U.L1/300, flores)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
U.plot
quartz()#
U.plot <- qplot(U.L1/300, Spit, data=flores, ylab = "Spit", xlab = "Uranium Net Photons") +#
theme_bw() +#
stat_smooth(method="lm", formula=y~poly(x, 2)) +#
annotate("text", label=lm_eqn_poly(lm(Spit~U.L1/300, flores)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
U.plot
U.plot <- qplot(U.L1/300, Spit, data=flores, ylab = "Spit", xlab = "Uranium Net Photons") +#
theme_bw() +#
stat_smooth(method="lm", formula=y~poly(x, 2))
U.plot
?lm
runApp("~/GitHub/xrf-app")
traceback()
runApp("~/GitHub/xrf-app")
moshe <- read.csv(file="~/Desktop/Moshe/Second/Points-Table 1.csv")
library(ggplot2)#
lm_eqn = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
        eq <- substitute(italic(C)[i] == a + b %.% italic(I)[i]*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#
lm_eqn_val = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
        eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#
#moshe <- read.csv(file="~/Desktop/Moshe/Moshe/Points-Table 1.csv")#
moshe <- read.csv(file="~/Desktop/Moshe/Second/Points-Table 1.csv")
layer.plot.s <- ggplot(moshe, aes(Second, S.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("S ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(S.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.s
layer.plot.cl <- ggplot(moshe, aes(Second, Cl.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("Cl ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(Cl.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.cl
layer.plot.k <- ggplot(moshe, aes(Second, K.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("K ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(K.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.k
layer.plot.ca <- ggplot(moshe, aes(Second, Ca.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("Ca ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(Ca.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.ca
layer.plot.cu <- ggplot(moshe, aes(Second, Cu.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("Cu ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(Cu.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.cu
moshe <- read.csv(file="~/Desktop/Moshe/Second/Points-500.csv")
moshe <- read.csv(file="~/Desktop/Moshe/Second/500-Table 1.csv")
layer.plot.cu <- ggplot(moshe, aes(Second, Cu.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("Cu ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(Cu.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.cu
layer.plot.s <- ggplot(moshe, aes(Second, S.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("S ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(S.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.s
layer.plot.k <- ggplot(moshe, aes(Second, K.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("K ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(K.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.k
layer.plot.ca <- ggplot(moshe, aes(Second, Ca.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("Ca ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(Ca.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.ca
moshe <- read.csv(file="~/Desktop/Moshe/Second/2500-Table 1.csv")
layer.plot.cu <- ggplot(moshe, aes(Second, Cu.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("Cu ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(Cu.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.cu
layer.plot.s <- ggplot(moshe, aes(Second, S.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("S ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(S.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.s
layer.plot.k <- ggplot(moshe, aes(Second, K.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("K ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(K.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.k
layer.plot.ca <- ggplot(moshe, aes(Second, Ca.K12/60)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_y_continuous("Ca ncps") +#
scale_x_continuous("Value", limits=c(0, 100)) +#
annotate("text", label=lm_eqn_val(lm(Ca.K12/60~Second, moshe)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_light()#
layer.plot.ca
library(ggplot2)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape)#
library(sp)#
library(raster)#
library(rgdal)#
library(rgeos)#
library(maptools)#
library(sp)#
library(spatialEco)#
#
###Load Packages#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
#
###Download Packages (if needed) at http://www.bleedrake.com/Neolithic/Neolithic.zip#
#
###Load Data#
neolithic.bio <- read.csv(file="http://www.bleedrake.com/Neolithic/neolithic.csv")#
all.data <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/All Iberia/Just Dates-1-Table 1.csv")#
#
###Load Calibration Curves#
intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")#
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#####Collapse Dates#
collapse.the.dates.new <- function(sites, region, context, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, context, lat, long, as.numeric(dates), as.numeric(sigma))#
    colnames(df) <- c("Site", "Region", "Context", "Lat", "Long", "CYrBPunc", "Sigma")#
    df <- subset(df, df$CYrBPunc < datemax & df$CYrBPunc > datemin)#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),6]-df[2:nrow(df), 6]))/((sqrt(df[2:nrow(df), 7]^2 + df[1:(nrow(df)-1),7]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
neolithic.bio <- collapse.the.dates.begin(sites=neolithic.bio$Site, biogeo=neolithic.bio$Biogeo_Uni, general=neolithic.bio$St_Area_NE, dates=neolithic.bio$CYrBPunc, sigma=neolithic.bio$Sigma)#
#####Intersect 14C dates by region#
antonio.regions <- readOGR("/Users/lee/Dropbox/4.2 ky event/jwp paper/Event42_areasIberia", "Event42_areasIberia")#
antonio.p1 <- as(antonio.regions, "SpatialPolygons")#
antonio.p1@data$id = rownames(antonio.p1@data)#
#
small.frame <- data.frame(all.data$Region, all.data$Site, all.data$Site.Type, all.data$Site.Type.Simple, all.data$Context..phase..etc.., all.data$Lat.in.Dec, all.data$Long.in.Dec, all.data$Sample.Lab.Number, all.data$X14C.Yr.BP.uncal, all.data$Sigma)#
colnames(small.frame) <- c("Region", "Site", "Details", "Type", "Context", "Latitude", "Longitude", "LabNumber", "Date", "Sigma")#
small.frame <- small.frame[!(is.na(small.frame$Latitude) | small.frame$Latitude==""), ]#
small.frame <- small.frame[!(is.na(small.frame$Longitude) | small.frame$Longitude==""), ]#
small.frame$Region <- sub("^$", "0", small.frame$Region)#
small.frame$Site <- sub("^$", "0", small.frame$Site)#
small.frame$Type <- sub("^$", "0", small.frame$Type)#
small.frame$Context <- sub("^$", "0", small.frame$Context)#
small.frame$LabNumber <- sub("^$", "0", small.frame$LabNumber)#
small.frame$Date <- sub("^$", "0", small.frame$Date)#
small.frame$Sigma <- sub("^$", "0", small.frame$Sigma)#
iberia.points <- data.frame(small.frame)#
#
coordinates(iberia.points) = ~Longitude+Latitude#
proj4string(iberia.points) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0")#
#
iberia.points <- spTransform(iberia.points, CRS("+proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs"))#
#
overlap <- over(iberia.points, antonio.regions)#
#
iberia.points@data$NewRegion <- overlap$Area_code#
iberia.point.var <- spTransform(iberia.points, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0"))#
iberia.data <- data.frame(iberia.points)#
iberia.data$Site <- as.character(iberia.data$Site)#
iberia.data2 <- data.frame(iberia.point.var)#
iberia.data2$NewRegion <- as.character(iberia.data2$NewRegion)#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SW", "Southwest")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SE", "Southeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="Mediterranean", "Northeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="North", "Northwest")#
iberia.col <- collapse.the.dates.new(sites=iberia.data2$Site, region=iberia.data2$NewRegion, context=iberia.data2$Type, lat=iberia.data2$Latitude, long=iberia.data2$Longitude, dates=iberia.data2$Date, sigma=iberia.data2$Sigma, datemin=1000, datemax=14000)
##########################
###Generalized Regions####
##########################
#
northwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northwest")#
southwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southwest")#
southeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southeast")#
meseta.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Meseta")#
northeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northeast")#
northwest.sig<- subset(iberia.col$Sigma, iberia.col$Region=="Northwest")#
southwest.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southwest")#
southeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southeast")#
meseta.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Meseta")#
northeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Northeast")#
#
northwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northwest"))#
southwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southwest"))#
southeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southeast"))#
meseta.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Meseta"))#
northeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northeast"))#
#
northwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northwest")#
southwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southwest")#
southeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southeast")#
meseta.lat <- subset(iberia.col$Lat, iberia.col$Region=="Meseta")#
northeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northeast")#
#
northwest.long <- subset(iberia.col$Long, iberia.col$Region=="Northwest")#
southwest.long <- subset(iberia.col$Long, iberia.col$Region=="Southwest")#
southeast.long <- subset(iberia.col$Long, iberia.col$Region=="Southeast")#
meseta.long <- subset(iberia.col$Long, iberia.col$Region=="Meseta")#
northeast.long <- subset(iberia.col$Long, iberia.col$Region=="Northeast")#
#
northwest.context <- subset(iberia.col$Context, iberia.col$Region=="Northwest")#
southwest.context <- subset(iberia.col$Context, iberia.col$Region=="Southwest")#
southeast.context <- subset(iberia.col$Context, iberia.col$Region=="Southeast")#
meseta.context <- subset(iberia.col$Context, iberia.col$Region=="Meseta")#
northeast.context <- subset(iberia.col$Context, iberia.col$Region=="Northeast")#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
southeast.intcal <- rep("intcal13", length(southeast.14C))#
meseta.intcal <- rep("intcal13", length(meseta.14C))#
northeast.intcal <- rep("intcal13", length(northeast.14C))#
northwest.names <- rep("North", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
southeast.names <- rep("Southeast", length(southeast.14C))#
meseta.names <- rep("Meseta", length(meseta.14C))#
northeast.names <- rep("Northeast", length(northeast.14C))#
northwest.sites<- subset(iberia.col$Site, iberia.col$Region=="Northwest")#
southwest.sites <- subset(iberia.col$Site, iberia.col$Region=="Southwest")#
southeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Southeast")#
meseta.sites <- subset(iberia.col$Site, iberia.col$Region=="Meseta")#
northeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Northeast")#
northwest.site.count <- length(unique(as.vector(northwest.sites)))#
southwest.site.count <- length(unique(southwest.sites))#
southeast.site.count <- length(unique(southeast.sites))#
meseta.site.count <- length(unique(meseta.sites))#
northeast.site.count <- length(unique(northeast.sites))
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
#
mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
simplify = simplify)#
#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) { #
samp.intcal <- rep("intcal13", length(x))#
samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
samp.ages <- ldply(samp.slugdens, data.frame)#
res.by <- by(samp.ages$ageGrid, samp.ages$.id, median) #
res.t <- t(res.by)#
samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
time <- seq(xmin+5, xmax-5, 10)#
samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
samp.hist <- hist(samp.grid, breaks=length(time))#
samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
colnames(samp.hist) <- c("Age", "Counts", "Density")#
#samp.hist <- arrange(samp.all, desc(Age))#
#
makeloess <- function(x, n){#
time <- seq(xmin+5, xmax-5, 10)#
samp.age <- sample(x, size=n, replace=TRUE)#
samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
samp.dist <- as.vector(samp.dist)#
samp.dist <- c(xmax, xmin, samp.dist)#
samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
samp.loess <- lowess(time, samp.date, f=0.15)#
samp.fitted <- samp.loess$y#
return(samp.fitted)#
}#
#
samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
samp.replicate <- as.data.frame(samp.replicate)#
samp.replicate[is.na(samp.replicate)] <- 0#
samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
#
samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
#
samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
#samp.descriptive <- arrange(samp.descriptive, desc(Age))#
samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
names(samp.all)[names(samp.all)=="time"] <- "Age"#
names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
samp.all <- arrange(samp.all, desc(Age))#
return(samp.all)#
}#
#
d#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
          samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess.old <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+1, xmax, 1)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.grid <- c(fill, samp.grid)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+1, xmax, 1)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(fill, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.cal.loess.trad <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.loess <- function(dates, sigma, sites, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    small.age.frame <- data.frame(samp.ages$.id, as.vector(samp.ages$ageGrid), as.vector(samp.ages$ageSds))#
    colnames(small.age.frame) <- c("Id", "ageGrid", "ageSDS")#
    samp.test <- aggregate(small.age.frame[,2:3], by=list(small.age.frame$Id), FUN=median)#
    colnames(samp.test) <- c("Id", "Mean", "SD")#
    samp.test$Min <- samp.test$Mean-samp.test$SD#
    samp.test$Max <- samp.test$Mean+samp.test$SD#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    samp.age.grid <- subset(samp.age.grid, !(xmin > samp.age.grid | samp.age.grid > xmax))#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(c(samp.grid, xmin, xmax), breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(a.frame, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.id <- as.vector(sample(as.vector(a.frame$Id), size=n, replace=TRUE))#
        t.frame <- data.frame(t(a.frame))#
        colnames(t.frame) <- a.frame$Id#
        s.t.frame <- t.frame[,samp.id]#
        f.frame <- data.frame(t(s.t.frame))#
        #f.frame <- data.table(f.frame)#
        small.frame <- data.frame(f.frame$Id, f.frame$Min, f.frame$Max)#
        colnames(small.frame) <- c("Id", "Min", "Max")#
        small.list <- split(as.vector(small.frame[,2:3]), f=small.frame$Id)#
        small.list <- lapply(small.list, function(x) as.vector(x[1,]))#
        seq.gen <- function(a.frame) {#
            a.frame <- as.data.frame(a.frame)#
            at.vector <- as.numeric(as.vector(as.data.frame(t(a.frame))[,1]))#
            sequence <- seq(from=at.vector[1], to=at.vector[2], by=1)#
            return(sequence)#
        }#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- ldply(all.seq, data.frame)[,2]#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- as.vector(tapply(samp.dist, cut(samp.dist, length(time)), length))#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- as.vector(ldply(all.seq, data.frame)[,2])#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(samp.test, reps)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
stack.14C.taxa.old <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma*2#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma*2#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#######
stack.14C <- function(x, sigma, xmin, xmax, taxa){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
taphonomic.correct <- function(stack.14C.data) {#
    df <- stack.14C.data#
    n.t <- 5.726442*(10^6)*(df$Age + 2176.4)^-1.3925309#
    lambda <- 1.3925309/(2176.4+df$Age)*100#
    lambda.r <- 1-lambda#
    n.t.relative <- n.t/128.8192#
    df$Counts.Corrected <-df$Counts/n.t.relative#
    count.mod.sum <- sum(df$Counts.Corrected)#
    df$Density.Corrected <- df$Counts.Corrected/count.mod.sum#
    return(df)#
}#
criterion.data.null <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !stack.14C.taxa.object$Taxa==criteria.names)#
    ageGrids <- c(temp.df.1$ageGrid, temp.df.2$ageGrid)#
    Taxa <- c(as.vector(temp.df.1$Taxa), rep("Other", length(temp.df.2$ageGrid)))#
    temp.df <- data.frame(ageGrids, Taxa)#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
criterion.data.old <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, corrected.samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)), even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    colnames(temp.df.alt) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    temp.list.alt <- split(temp.df.alt$ageGrid, f=temp.df.alt$Taxa)#
    temp.list.alt <- rapply(temp.list.alt, f=sort, how="list", decreasing=TRUE)#
    samp.hist.list.alt <- rapply(temp.list.alt, f=hist, how="list", breaks=length(time))#
    samp.mids.alt <- sapply(samp.hist.list.alt, "[[", 4)#
    samp.counts.alt <- sapply(samp.hist.list.alt, "[[", 2)#
    samp.density.alt <- sapply(samp.hist.list.alt, "[[", 3)#
    samp.mids.df.alt <- ldply(samp.mids.alt, data.frame)#
    samp.counts.df.alt <- ldply(samp.counts.alt, data.frame)#
    samp.density.df.alt <- ldply(samp.density.alt, data.frame)#
    hist.alt <- hist(temp.df.alt$ageGrid, breaks=length(time))#
    samp.mids.alt <- hist.alt$mids#
    samp.counts.alt <- hist.alt$counts#
    count.sum <- sum(samp.counts.alt)#
    samp.density.alt <- hist.alt$density#
    samp.names.alt <- rep("Total", length(samp.mids.alt))#
    samp.hist <- data.frame(c(samp.mids.df[,1], samp.names.alt), as.numeric(as.vector(c(samp.mids.df[,2], samp.mids.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt)))/count.sum)#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)),#
        as.numeric(as.vector(even.more.corrected.samp.hist$Freq))/count.sum,#
        even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Density", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data.test <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    df <- data.frame(c(temp.df.1$ageGrid, temp.df.2$ageGrid), c(as.vector(temp.df.1$Taxa), rep("Total", length(temp.df.2$ageGrid))))#
    colnames(df) <- c("ageGrid", "Taxa")#
    return(df)#
}#
median.stack.14C.half <- function(x, sigma, sites, context, xmin, xmax){#
    intcal13 <- intcal.13#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(as.numeric(as.vector(x)), as.numeric(as.vector(sigma)), samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    small.frame <- data.frame(medians.all, sites, context)#
    colnames(small.frame) <- c("Median", "Site", "Context")#
    #medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    small.frame <- subset(small.frame, !(small.frame$Median > xmax | small.frame$Median < xmin))#
    return(small.frame)#
}
####Taxa Analysis#
northwest.stack <- stack.14C.taxa(date=northwest.14C, sigma=northwest.sig, xmin=0, xmax=12000, lat=northwest.lat, long=northwest.long, taxa=northwest.taxa)#
southwest.stack <- stack.14C.taxa(date=southwest.14C, sigma=southwest.sig, xmin=2000, xmax=12000, lat=southwest.lat, long=southwest.long, taxa=southwest.taxa)#
southeast.stack <- stack.14C.taxa(date=southeast.14C, sigma=southeast.sig, xmin=2000, xmax=12000, lat=southeast.lat, long=southeast.long, taxa=southeast.taxa)#
meseta.stack <- stack.14C.taxa(date=meseta.14C, sigma=meseta.sig, xmin=2000, xmax=12000, lat=meseta.lat, long=meseta.long, taxa=meseta.taxa)#
northeast.stack <- stack.14C.taxa(date=northeast.14C, sigma=northeast.sig, xmin=2000, xmax=12000, lat=northeast.lat, long=northeast.long, taxa=northeast.taxa)#
#
northwest.criterion <- criterion.data(northwest.stack, criteria.names=c("Mortuary", "Settlement"), xmin=0, xmax=12000)#
southwest.criterion <- criterion.data(southwest.stack, criteria.names=c("Mortuary",  "Settlement"), xmin=0, xmax=12000)#
southeast.criterion <- criterion.data(southeast.stack, criteria.names=c("Mortuary",  "Settlement"), xmin=0, xmax=12000)#
meseta.criterion <- criterion.data(meseta.stack, criteria.names=c("Mortuary", "Settlement"), xmin=0, xmax=12000)#
northeast.criterion <- criterion.data(northeast.stack, criteria.names=c("Mortuary",  "Settlement"), xmin=0, xmax=12000)#
#
northwest.criterion$Taxa <- factor(northwest.criterion$Taxa, levels = c("Total", "Settlement", "Mortuary"))
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)
northwest.sub.plot
quartz()
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=rev(Taxa), position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(northwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(arrange(northwest.criterion, Taxa)) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
northwest.sub.plot
?arrange
#####Plots#
northwest.sub.plot <- ggplot(arrange(northwest.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .2, end = .8, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(arrange(northwest.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
#ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
northwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(arrange(northwest.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
southwest.sub.plot <- ggplot(southwest.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southwest")#
ggsave(southwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure18.tiff", dpi=300, device="tiff", width=10, height=7)#
southeast.sub.plot <- ggplot(southeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southeast")#
ggsave(southeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure20.tiff", dpi=300, device="tiff", width=10, height=7)#
meseta.sub.plot <- ggplot(meseta.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Meseta")#
ggsave(meseta.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure9.tiff", dpi=300, device="tiff", width=10, height=7)#
northeast.sub.plot <- ggplot(northeast.criterion) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=Taxa, fill=Taxa), position="stack") +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northeast")#
ggsave(northeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure16.tiff", dpi=300, device="tiff", width=10, height=7)
northeast.sub.plot <- ggplot(arrange(northeast.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northeast")
northeast.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(arrange(northwest.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)
northwest.sub.plot
northwest.criterion$Taxa <- factor(northwest.criterion$Taxa, levels = c("Total", "Settlement", "Mortuary"))#
southwest.criterion$Taxa <- factor(southwest.criterion$Taxa, levels = c("Total", "Settlement", "Mortuary"))#
southeast.criterion$Taxa <- factor(southeast.criterion$Taxa, levels = c("Total", "Settlement", "Mortuary"))#
meseta.criterion$Taxa <- factor(meseta.criterion$Taxa, levels = c("Total", "Settlement", "Mortuary"))#
northeast.criterion$Taxa <- factor(northeast.criterion$Taxa, levels = c("Total", "Settlement", "Mortuary"))
southwest.sub.plot <- ggplot(arrange(southwest.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southwest")#
ggsave(southwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure18.tiff", dpi=300, device="tiff", width=10, height=7)
southwest.sub.plot
#####Plots#
northwest.sub.plot <- ggplot(arrange(northwest.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northwest")#
ggsave(northwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure8.tiff", dpi=300, device="tiff", width=10, height=7)#
southwest.sub.plot <- ggplot(arrange(southwest.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southwest")#
ggsave(southwest.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure18.tiff", dpi=300, device="tiff", width=10, height=7)#
southeast.sub.plot <- ggplot(arrange(southeast.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Southeast")#
ggsave(southeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure20.tiff", dpi=300, device="tiff", width=10, height=7)#
meseta.sub.plot <- ggplot(arrange(meseta.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Meseta")#
ggsave(meseta.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure9.tiff", dpi=300, device="tiff", width=10, height=7)#
northeast.sub.plot <- ggplot(arrange(northeast.criterion, desc(Taxa))) +#
theme_light() +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
geom_area(aes(x=Age, y=Density,  colour=factor(Taxa), fill=factor(Taxa), order=Taxa, position="stack")) +#
scale_x_reverse("Year BC", limits = c(5000, 1000), breaks = seq(1000, 5000, 500)) +#
scale_y_continuous("Density", labels=fmt()) +#
theme(legend.position=c(0.025, .975), legend.justification=c(0,1), legend.background = element_rect(colour = "white", fill = "white")) +#
guides(fill=guide_legend(title="Site Type"), colour=guide_legend(title="Site Type")) +#
scale_fill_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
scale_colour_grey(start = .8, end = .2, guide=guide_legend(reverse=TRUE)) +#
geom_vline(aes(xintercept = abs(2200)), colour="black", linetype=2)+#
geom_vline(aes(xintercept = abs(2000)), colour="black", linetype=2)+#
ggtitle("Northeast")#
ggsave(northeast.sub.plot, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure16.tiff", dpi=300, device="tiff", width=10, height=7)
head(iberia.col)
length(northwest.sig)
iberia.col <- subset(iberia.col, CYrBPunc < 5500)
iberia.col <- subset(iberia.col, CYrBPunc > 500)
northwest.sig<- subset(iberia.col$Sigma, iberia.col$Region=="Northwest")#
southwest.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southwest")#
southeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southeast")#
meseta.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Meseta")#
northeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Northeast")
length(northwest.sig)
length(southwest.sig)
iberia.data2
ls(iberia.data2)
iberia.data <- subset(iberia.data2, iberia.data2$Date < 5500)
iberia.data <- subset(iberia.data2, iberia.data2$Date > 500)
length(iberia.data[1])
length(iberia.data$Date)
length(subset(iberia.data$Date, ))
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape)#
library(sp)#
library(raster)#
library(rgdal)#
library(rgeos)#
library(maptools)#
library(sp)#
library(spatialEco)#
#
###Load Packages#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
#
###Download Packages (if needed) at http://www.bleedrake.com/Neolithic/Neolithic.zip#
#
###Load Data#
neolithic.bio <- read.csv(file="http://www.bleedrake.com/Neolithic/neolithic.csv")#
all.data <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/All Iberia/Just Dates-1-Table 1.csv")#
#
###Load Calibration Curves#
intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")#
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#####Collapse Dates#
collapse.the.dates.new <- function(sites, region, context, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, context, lat, long, as.numeric(dates), as.numeric(sigma))#
    colnames(df) <- c("Site", "Region", "Context", "Lat", "Long", "CYrBPunc", "Sigma")#
    df <- subset(df, df$CYrBPunc < datemax & df$CYrBPunc > datemin)#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),6]-df[2:nrow(df), 6]))/((sqrt(df[2:nrow(df), 7]^2 + df[1:(nrow(df)-1),7]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
neolithic.bio <- collapse.the.dates.begin(sites=neolithic.bio$Site, biogeo=neolithic.bio$Biogeo_Uni, general=neolithic.bio$St_Area_NE, dates=neolithic.bio$CYrBPunc, sigma=neolithic.bio$Sigma)#
#####Intersect 14C dates by region#
antonio.regions <- readOGR("/Users/lee/Dropbox/4.2 ky event/jwp paper/Event42_areasIberia", "Event42_areasIberia")#
antonio.p1 <- as(antonio.regions, "SpatialPolygons")#
antonio.p1@data$id = rownames(antonio.p1@data)#
#
small.frame <- data.frame(all.data$Region, all.data$Site, all.data$Site.Type, all.data$Site.Type.Simple, all.data$Context..phase..etc.., all.data$Lat.in.Dec, all.data$Long.in.Dec, all.data$Sample.Lab.Number, all.data$X14C.Yr.BP.uncal, all.data$Sigma)#
colnames(small.frame) <- c("Region", "Site", "Details", "Type", "Context", "Latitude", "Longitude", "LabNumber", "Date", "Sigma")#
small.frame <- small.frame[!(is.na(small.frame$Latitude) | small.frame$Latitude==""), ]#
small.frame <- small.frame[!(is.na(small.frame$Longitude) | small.frame$Longitude==""), ]#
small.frame$Region <- sub("^$", "0", small.frame$Region)#
small.frame$Site <- sub("^$", "0", small.frame$Site)#
small.frame$Type <- sub("^$", "0", small.frame$Type)#
small.frame$Context <- sub("^$", "0", small.frame$Context)#
small.frame$LabNumber <- sub("^$", "0", small.frame$LabNumber)#
small.frame$Date <- sub("^$", "0", small.frame$Date)#
small.frame$Sigma <- sub("^$", "0", small.frame$Sigma)#
iberia.points <- data.frame(small.frame)#
#
coordinates(iberia.points) = ~Longitude+Latitude#
proj4string(iberia.points) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0")#
#
iberia.points <- spTransform(iberia.points, CRS("+proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs"))#
#
overlap <- over(iberia.points, antonio.regions)#
#
iberia.points@data$NewRegion <- overlap$Area_code#
iberia.point.var <- spTransform(iberia.points, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0"))#
iberia.data <- data.frame(iberia.points)#
iberia.data$Site <- as.character(iberia.data$Site)#
iberia.data2 <- data.frame(iberia.point.var)#
iberia.data2$NewRegion <- as.character(iberia.data2$NewRegion)#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SW", "Southwest")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SE", "Southeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="Mediterranean", "Northeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="North", "Northwest")#
iberia.col <- collapse.the.dates.new(sites=iberia.data2$Site, region=iberia.data2$NewRegion, context=iberia.data2$Type, lat=iberia.data2$Latitude, long=iberia.data2$Longitude, dates=iberia.data2$Date, sigma=iberia.data2$Sigma, datemin=1000, datemax=14000)#
#
spain <- get_map(location="Spain", zoom=6, maptype="terrain")#
#
Fig4 <- ggmap(spain, alpha=0.2) +#
geom_point(data=iberia.col, aes(x=Long, y=Lat, colour=Region, shape=Region), size=3, alpha=0.4)+#
coord_equal() +#
coord_map() +#
theme_tufte() +#
scale_x_continuous("Longitude") +#
scale_y_continuous("Latitude") +#
guides(size=FALSE, alpha=FALSE)#
#
ggsave(Fig4, , file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/Figure 4.tiff", dpi=300, device="tiff")#
##########################
###Generalized Regions####
##########################
#
northwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northwest")#
southwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southwest")#
southeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southeast")#
meseta.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Meseta")#
northeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northeast")#
northwest.sig<- subset(iberia.col$Sigma, iberia.col$Region=="Northwest")#
southwest.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southwest")#
southeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southeast")#
meseta.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Meseta")#
northeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Northeast")#
#
northwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northwest"))#
southwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southwest"))#
southeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southeast"))#
meseta.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Meseta"))#
northeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northeast"))#
#
northwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northwest")#
southwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southwest")#
southeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southeast")#
meseta.lat <- subset(iberia.col$Lat, iberia.col$Region=="Meseta")#
northeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northeast")#
#
northwest.long <- subset(iberia.col$Long, iberia.col$Region=="Northwest")#
southwest.long <- subset(iberia.col$Long, iberia.col$Region=="Southwest")#
southeast.long <- subset(iberia.col$Long, iberia.col$Region=="Southeast")#
meseta.long <- subset(iberia.col$Long, iberia.col$Region=="Meseta")#
northeast.long <- subset(iberia.col$Long, iberia.col$Region=="Northeast")#
#
northwest.context <- subset(iberia.col$Context, iberia.col$Region=="Northwest")#
southwest.context <- subset(iberia.col$Context, iberia.col$Region=="Southwest")#
southeast.context <- subset(iberia.col$Context, iberia.col$Region=="Southeast")#
meseta.context <- subset(iberia.col$Context, iberia.col$Region=="Meseta")#
northeast.context <- subset(iberia.col$Context, iberia.col$Region=="Northeast")#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
southeast.intcal <- rep("intcal13", length(southeast.14C))#
meseta.intcal <- rep("intcal13", length(meseta.14C))#
northeast.intcal <- rep("intcal13", length(northeast.14C))#
northwest.names <- rep("North", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
southeast.names <- rep("Southeast", length(southeast.14C))#
meseta.names <- rep("Meseta", length(meseta.14C))#
northeast.names <- rep("Northeast", length(northeast.14C))#
northwest.sites<- subset(iberia.col$Site, iberia.col$Region=="Northwest")#
southwest.sites <- subset(iberia.col$Site, iberia.col$Region=="Southwest")#
southeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Southeast")#
meseta.sites <- subset(iberia.col$Site, iberia.col$Region=="Meseta")#
northeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Northeast")#
northwest.site.count <- length(unique(as.vector(northwest.sites)))#
southwest.site.count <- length(unique(southwest.sites))#
southeast.site.count <- length(unique(southeast.sites))#
meseta.site.count <- length(unique(meseta.sites))#
northeast.site.count <- length(unique(northeast.sites))#
#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
#
mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
simplify = simplify)#
#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) { #
samp.intcal <- rep("intcal13", length(x))#
samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
samp.ages <- ldply(samp.slugdens, data.frame)#
res.by <- by(samp.ages$ageGrid, samp.ages$.id, median) #
res.t <- t(res.by)#
samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
time <- seq(xmin+5, xmax-5, 10)#
samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
samp.hist <- hist(samp.grid, breaks=length(time))#
samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
colnames(samp.hist) <- c("Age", "Counts", "Density")#
#samp.hist <- arrange(samp.all, desc(Age))#
#
makeloess <- function(x, n){#
time <- seq(xmin+5, xmax-5, 10)#
samp.age <- sample(x, size=n, replace=TRUE)#
samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
samp.dist <- as.vector(samp.dist)#
samp.dist <- c(xmax, xmin, samp.dist)#
samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
samp.loess <- lowess(time, samp.date, f=0.15)#
samp.fitted <- samp.loess$y#
return(samp.fitted)#
}#
#
samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
samp.replicate <- as.data.frame(samp.replicate)#
samp.replicate[is.na(samp.replicate)] <- 0#
samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
#
samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
#
samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
#samp.descriptive <- arrange(samp.descriptive, desc(Age))#
samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
names(samp.all)[names(samp.all)=="time"] <- "Age"#
names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
samp.all <- arrange(samp.all, desc(Age))#
return(samp.all)#
}#
#
d#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
          samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess.old <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+1, xmax, 1)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.grid <- c(fill, samp.grid)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+1, xmax, 1)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(fill, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.cal.loess.trad <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.loess <- function(dates, sigma, sites, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    small.age.frame <- data.frame(samp.ages$.id, as.vector(samp.ages$ageGrid), as.vector(samp.ages$ageSds))#
    colnames(small.age.frame) <- c("Id", "ageGrid", "ageSDS")#
    samp.test <- aggregate(small.age.frame[,2:3], by=list(small.age.frame$Id), FUN=median)#
    colnames(samp.test) <- c("Id", "Mean", "SD")#
    samp.test$Min <- samp.test$Mean-samp.test$SD#
    samp.test$Max <- samp.test$Mean+samp.test$SD#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    samp.age.grid <- subset(samp.age.grid, !(xmin > samp.age.grid | samp.age.grid > xmax))#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(c(samp.grid, xmin, xmax), breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(a.frame, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.id <- as.vector(sample(as.vector(a.frame$Id), size=n, replace=TRUE))#
        t.frame <- data.frame(t(a.frame))#
        colnames(t.frame) <- a.frame$Id#
        s.t.frame <- t.frame[,samp.id]#
        f.frame <- data.frame(t(s.t.frame))#
        #f.frame <- data.table(f.frame)#
        small.frame <- data.frame(f.frame$Id, f.frame$Min, f.frame$Max)#
        colnames(small.frame) <- c("Id", "Min", "Max")#
        small.list <- split(as.vector(small.frame[,2:3]), f=small.frame$Id)#
        small.list <- lapply(small.list, function(x) as.vector(x[1,]))#
        seq.gen <- function(a.frame) {#
            a.frame <- as.data.frame(a.frame)#
            at.vector <- as.numeric(as.vector(as.data.frame(t(a.frame))[,1]))#
            sequence <- seq(from=at.vector[1], to=at.vector[2], by=1)#
            return(sequence)#
        }#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- ldply(all.seq, data.frame)[,2]#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- as.vector(tapply(samp.dist, cut(samp.dist, length(time)), length))#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- as.vector(ldply(all.seq, data.frame)[,2])#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(samp.test, reps)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
stack.14C.taxa.old <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma*2#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma*2#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#######
stack.14C <- function(x, sigma, xmin, xmax, taxa){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
taphonomic.correct <- function(stack.14C.data) {#
    df <- stack.14C.data#
    n.t <- 5.726442*(10^6)*(df$Age + 2176.4)^-1.3925309#
    lambda <- 1.3925309/(2176.4+df$Age)*100#
    lambda.r <- 1-lambda#
    n.t.relative <- n.t/128.8192#
    df$Counts.Corrected <-df$Counts/n.t.relative#
    count.mod.sum <- sum(df$Counts.Corrected)#
    df$Density.Corrected <- df$Counts.Corrected/count.mod.sum#
    return(df)#
}#
criterion.data.null <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !stack.14C.taxa.object$Taxa==criteria.names)#
    ageGrids <- c(temp.df.1$ageGrid, temp.df.2$ageGrid)#
    Taxa <- c(as.vector(temp.df.1$Taxa), rep("Other", length(temp.df.2$ageGrid)))#
    temp.df <- data.frame(ageGrids, Taxa)#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
criterion.data.old <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, corrected.samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)), even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    colnames(temp.df.alt) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    temp.list.alt <- split(temp.df.alt$ageGrid, f=temp.df.alt$Taxa)#
    temp.list.alt <- rapply(temp.list.alt, f=sort, how="list", decreasing=TRUE)#
    samp.hist.list.alt <- rapply(temp.list.alt, f=hist, how="list", breaks=length(time))#
    samp.mids.alt <- sapply(samp.hist.list.alt, "[[", 4)#
    samp.counts.alt <- sapply(samp.hist.list.alt, "[[", 2)#
    samp.density.alt <- sapply(samp.hist.list.alt, "[[", 3)#
    samp.mids.df.alt <- ldply(samp.mids.alt, data.frame)#
    samp.counts.df.alt <- ldply(samp.counts.alt, data.frame)#
    samp.density.df.alt <- ldply(samp.density.alt, data.frame)#
    hist.alt <- hist(temp.df.alt$ageGrid, breaks=length(time))#
    samp.mids.alt <- hist.alt$mids#
    samp.counts.alt <- hist.alt$counts#
    count.sum <- sum(samp.counts.alt)#
    samp.density.alt <- hist.alt$density#
    samp.names.alt <- rep("Total", length(samp.mids.alt))#
    samp.hist <- data.frame(c(samp.mids.df[,1], samp.names.alt), as.numeric(as.vector(c(samp.mids.df[,2], samp.mids.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt)))/count.sum)#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)),#
        as.numeric(as.vector(even.more.corrected.samp.hist$Freq))/count.sum,#
        even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Density", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data.test <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    df <- data.frame(c(temp.df.1$ageGrid, temp.df.2$ageGrid), c(as.vector(temp.df.1$Taxa), rep("Total", length(temp.df.2$ageGrid))))#
    colnames(df) <- c("ageGrid", "Taxa")#
    return(df)#
}#
median.stack.14C.half <- function(x, sigma, sites, context, xmin, xmax){#
    intcal13 <- intcal.13#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(as.numeric(as.vector(x)), as.numeric(as.vector(sigma)), samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    small.frame <- data.frame(medians.all, sites, context)#
    colnames(small.frame) <- c("Median", "Site", "Context")#
    #medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    small.frame <- subset(small.frame, !(small.frame$Median > xmax | small.frame$Median < xmin))#
    return(small.frame)#
}#
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
intcal.13 <- read.csv(file="~/Dropbox/Documents/SCDPD/First Round/Nature Submission/Supplemental Data/intcal13.csv")
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
head(northwest.med)
length(northwest.med$Median)
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=3300, xmin=1500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax= 3300, xmin= 1500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax= 3300, xmin= 1500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax= 3300, xmin= 1500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax= 3300, xmin= 1500)
north.med.site.count <- length(unique(north.med$Site))#
meseta.med.site.count <- length(unique(meseta.med$Site))#
med.med.site.count <- length(unique(med.med$Site))#
southwest.med.site.count <- length(unique(southwest.med$Site))#
southeast.med.site.count <- length(unique(southeast.med$Site))
northwest.med.site.count <- length(unique(northwest.med$Site))#
meseta.med.site.count <- length(unique(meseta.med$Site))#
northeast.med.site.count <- length(unique(northeast.med$Site))#
southwest.med.site.count <- length(unique(southwest.med$Site))#
southeast.med.site.count <- length(unique(southeast.med$Site))
length(northwest.med)
length(northwest.med$Median)
length(meseta.med$Median)
length(northeast.med$Median)
length(southwest.med$Median)
length(southeast.med$Median)
northwest.med.site.count
meseta.med.site.count
northeast.med.site.count
southwest.med.site.count
southeast.med.site.count
head(northwest.med)
table(northwest.med$Context)
table(meseta.med$Context)
table(northeast.med$Context)
table(southwest.med$Context)
table(southeast.med$Context)
ls(iberia.data2)
ls(iberia.col)
iberia.col <- iberia.data2
head(iberia.col)
colnames(iberia.col) <- c("Region", "Site", "Details", "Type", "Context", "LabNumber", "CYrBPunc", "Sigma", "NewRegion", "Longitude", "Latitude", "optional")
head(iberia.col)
##########################
###Generalized Regions####
##########################
#
northwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northwest")#
southwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southwest")#
southeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southeast")#
meseta.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Meseta")#
northeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northeast")#
northwest.sig<- subset(iberia.col$Sigma, iberia.col$Region=="Northwest")#
southwest.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southwest")#
southeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southeast")#
meseta.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Meseta")#
northeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Northeast")#
#
northwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northwest"))#
southwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southwest"))#
southeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southeast"))#
meseta.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Meseta"))#
northeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northeast"))#
#
northwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northwest")#
southwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southwest")#
southeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southeast")#
meseta.lat <- subset(iberia.col$Lat, iberia.col$Region=="Meseta")#
northeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northeast")#
#
northwest.long <- subset(iberia.col$Long, iberia.col$Region=="Northwest")#
southwest.long <- subset(iberia.col$Long, iberia.col$Region=="Southwest")#
southeast.long <- subset(iberia.col$Long, iberia.col$Region=="Southeast")#
meseta.long <- subset(iberia.col$Long, iberia.col$Region=="Meseta")#
northeast.long <- subset(iberia.col$Long, iberia.col$Region=="Northeast")#
#
northwest.context <- subset(iberia.col$Context, iberia.col$Region=="Northwest")#
southwest.context <- subset(iberia.col$Context, iberia.col$Region=="Southwest")#
southeast.context <- subset(iberia.col$Context, iberia.col$Region=="Southeast")#
meseta.context <- subset(iberia.col$Context, iberia.col$Region=="Meseta")#
northeast.context <- subset(iberia.col$Context, iberia.col$Region=="Northeast")#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
southeast.intcal <- rep("intcal13", length(southeast.14C))#
meseta.intcal <- rep("intcal13", length(meseta.14C))#
northeast.intcal <- rep("intcal13", length(northeast.14C))#
northwest.names <- rep("North", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
southeast.names <- rep("Southeast", length(southeast.14C))#
meseta.names <- rep("Meseta", length(meseta.14C))#
northeast.names <- rep("Northeast", length(northeast.14C))#
northwest.sites<- subset(iberia.col$Site, iberia.col$Region=="Northwest")#
southwest.sites <- subset(iberia.col$Site, iberia.col$Region=="Southwest")#
southeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Southeast")#
meseta.sites <- subset(iberia.col$Site, iberia.col$Region=="Meseta")#
northeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Northeast")#
northwest.site.count <- length(unique(as.vector(northwest.sites)))#
southwest.site.count <- length(unique(southwest.sites))#
southeast.site.count <- length(unique(southeast.sites))#
meseta.site.count <- length(unique(meseta.sites))#
northeast.site.count <- length(unique(northeast.sites))
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)#
northwest.med.site.count <- length(unique(northwest.med$Site))#
meseta.med.site.count <- length(unique(meseta.med$Site))#
northeast.med.site.count <- length(unique(northeast.med$Site))#
southwest.med.site.count <- length(unique(southwest.med$Site))#
southeast.med.site.count <- length(unique(southeast.med$Site))
head(northwest.sig)
head(iberia.col)
colnames(iberia.col) <- c("BadRegion", "Site", "Details", "Type", "Context", "LabNumber", "CYrBPunc", "Sigma", "NewRegion", "Longitude", "Latitude", "optional")
colnames(iberia.col) <- c("BadRegion", "Site", "Details", "Type", "Context", "LabNumber", "CYrBPunc", "Sigma", "Region", "Longitude", "Latitude", "optional")
##########################
###Generalized Regions####
##########################
#
northwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northwest")#
southwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southwest")#
southeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southeast")#
meseta.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Meseta")#
northeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northeast")#
northwest.sig<- subset(iberia.col$Sigma, iberia.col$Region=="Northwest")#
southwest.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southwest")#
southeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southeast")#
meseta.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Meseta")#
northeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Northeast")#
#
northwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northwest"))#
southwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southwest"))#
southeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southeast"))#
meseta.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Meseta"))#
northeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northeast"))#
#
northwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northwest")#
southwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southwest")#
southeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southeast")#
meseta.lat <- subset(iberia.col$Lat, iberia.col$Region=="Meseta")#
northeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northeast")#
#
northwest.long <- subset(iberia.col$Long, iberia.col$Region=="Northwest")#
southwest.long <- subset(iberia.col$Long, iberia.col$Region=="Southwest")#
southeast.long <- subset(iberia.col$Long, iberia.col$Region=="Southeast")#
meseta.long <- subset(iberia.col$Long, iberia.col$Region=="Meseta")#
northeast.long <- subset(iberia.col$Long, iberia.col$Region=="Northeast")#
#
northwest.context <- subset(iberia.col$Context, iberia.col$Region=="Northwest")#
southwest.context <- subset(iberia.col$Context, iberia.col$Region=="Southwest")#
southeast.context <- subset(iberia.col$Context, iberia.col$Region=="Southeast")#
meseta.context <- subset(iberia.col$Context, iberia.col$Region=="Meseta")#
northeast.context <- subset(iberia.col$Context, iberia.col$Region=="Northeast")#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
southeast.intcal <- rep("intcal13", length(southeast.14C))#
meseta.intcal <- rep("intcal13", length(meseta.14C))#
northeast.intcal <- rep("intcal13", length(northeast.14C))#
northwest.names <- rep("North", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
southeast.names <- rep("Southeast", length(southeast.14C))#
meseta.names <- rep("Meseta", length(meseta.14C))#
northeast.names <- rep("Northeast", length(northeast.14C))#
northwest.sites<- subset(iberia.col$Site, iberia.col$Region=="Northwest")#
southwest.sites <- subset(iberia.col$Site, iberia.col$Region=="Southwest")#
southeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Southeast")#
meseta.sites <- subset(iberia.col$Site, iberia.col$Region=="Meseta")#
northeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Northeast")#
northwest.site.count <- length(unique(as.vector(northwest.sites)))#
southwest.site.count <- length(unique(southwest.sites))#
southeast.site.count <- length(unique(southeast.sites))#
meseta.site.count <- length(unique(meseta.sites))#
northeast.site.count <- length(unique(northeast.sites))
head(northwest.sig)
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)#
northwest.med.site.count <- length(unique(northwest.med$Site))#
meseta.med.site.count <- length(unique(meseta.med$Site))#
northeast.med.site.count <- length(unique(northeast.med$Site))#
southwest.med.site.count <- length(unique(southwest.med$Site))#
southeast.med.site.count <- length(unique(southeast.med$Site))
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=3300, xmin=1500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax= 3300, xmin= 1500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax= 3300, xmin= 1500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax= 3300, xmin= 1500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax= 3300, xmin= 1500)#
northwest.med.site.count <- length(unique(northwest.med$Site))#
meseta.med.site.count <- length(unique(meseta.med$Site))#
northeast.med.site.count <- length(unique(northeast.med$Site))#
southwest.med.site.count <- length(unique(southwest.med$Site))#
southeast.med.site.count <- length(unique(southeast.med$Site))
median.stack.14C.half <- function(x, sigma, sites, context, xmin, xmax){#
    temp.table <- data.frame(x, sigma, sites, context)#
    temp.table <- subset(temp.table, !(temp.table$x > 39999 | temp.table$s < 100))#
    x <- temp.table$x#
    sigma <- temp.table$sigma#
    sites <- temp.table$sites#
    context <- temp.table$context#
    intcal13 <- intcal.13#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(as.numeric(as.vector(x)), as.numeric(as.vector(sigma)), samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    small.frame <- data.frame(medians.all, sites, context)#
    colnames(small.frame) <- c("Median", "Site", "Context")#
    #medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    small.frame <- subset(small.frame, !(small.frame$Median > xmax | small.frame$Median < xmin))#
    return(small.frame)#
}
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
median.stack.14C.half <- function(x, sigma, sites, context, xmin, xmax){#
    temp.table <- data.frame(x, sigma, sites, context)#
    temp.table <- subset(temp.table, !(temp.table$x > 39999 | temp.table$x < 100))#
    x <- temp.table$x#
    sigma <- temp.table$sigma#
    sites <- temp.table$sites#
    context <- temp.table$context#
    intcal13 <- intcal.13#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(as.numeric(as.vector(x)), as.numeric(as.vector(sigma)), samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    small.frame <- data.frame(medians.all, sites, context)#
    colnames(small.frame) <- c("Median", "Site", "Context")#
    #medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    small.frame <- subset(small.frame, !(small.frame$Median > xmax | small.frame$Median < xmin))#
    return(small.frame)#
}
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
median.stack.14C.half <- function(x, sigma, sites, context, xmin, xmax){#
    temp.table <- data.frame(as.vector(as.numeric(x)), sigma, sites, context)#
    temp.table <- subset(temp.table, !(temp.table$x > 39999 | temp.table$x < 100))#
    x <- temp.table$x#
    sigma <- temp.table$sigma#
    sites <- temp.table$sites#
    context <- temp.table$context#
    intcal13 <- intcal.13#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(as.numeric(as.vector(x)), as.numeric(as.vector(sigma)), samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    small.frame <- data.frame(medians.all, sites, context)#
    colnames(small.frame) <- c("Median", "Site", "Context")#
    #medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    small.frame <- subset(small.frame, !(small.frame$Median > xmax | small.frame$Median < xmin))#
    return(small.frame)#
}
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
?BchronCalibrate
iberia.col <- subset(iberia.col, CYrBPunc < 39999)
iberia.col <- subset(iberia.col, CYrBPunc > 100)
##########################
###Generalized Regions####
##########################
#
northwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northwest")#
southwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southwest")#
southeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southeast")#
meseta.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Meseta")#
northeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northeast")#
northwest.sig<- subset(iberia.col$Sigma, iberia.col$Region=="Northwest")#
southwest.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southwest")#
southeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southeast")#
meseta.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Meseta")#
northeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Northeast")#
#
northwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northwest"))#
southwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southwest"))#
southeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southeast"))#
meseta.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Meseta"))#
northeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northeast"))#
#
northwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northwest")#
southwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southwest")#
southeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southeast")#
meseta.lat <- subset(iberia.col$Lat, iberia.col$Region=="Meseta")#
northeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northeast")#
#
northwest.long <- subset(iberia.col$Long, iberia.col$Region=="Northwest")#
southwest.long <- subset(iberia.col$Long, iberia.col$Region=="Southwest")#
southeast.long <- subset(iberia.col$Long, iberia.col$Region=="Southeast")#
meseta.long <- subset(iberia.col$Long, iberia.col$Region=="Meseta")#
northeast.long <- subset(iberia.col$Long, iberia.col$Region=="Northeast")#
#
northwest.context <- subset(iberia.col$Context, iberia.col$Region=="Northwest")#
southwest.context <- subset(iberia.col$Context, iberia.col$Region=="Southwest")#
southeast.context <- subset(iberia.col$Context, iberia.col$Region=="Southeast")#
meseta.context <- subset(iberia.col$Context, iberia.col$Region=="Meseta")#
northeast.context <- subset(iberia.col$Context, iberia.col$Region=="Northeast")#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
southeast.intcal <- rep("intcal13", length(southeast.14C))#
meseta.intcal <- rep("intcal13", length(meseta.14C))#
northeast.intcal <- rep("intcal13", length(northeast.14C))#
northwest.names <- rep("North", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
southeast.names <- rep("Southeast", length(southeast.14C))#
meseta.names <- rep("Meseta", length(meseta.14C))#
northeast.names <- rep("Northeast", length(northeast.14C))#
northwest.sites<- subset(iberia.col$Site, iberia.col$Region=="Northwest")#
southwest.sites <- subset(iberia.col$Site, iberia.col$Region=="Southwest")#
southeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Southeast")#
meseta.sites <- subset(iberia.col$Site, iberia.col$Region=="Meseta")#
northeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Northeast")#
northwest.site.count <- length(unique(as.vector(northwest.sites)))#
southwest.site.count <- length(unique(southwest.sites))#
southeast.site.count <- length(unique(southeast.sites))#
meseta.site.count <- length(unique(meseta.sites))#
northeast.site.count <- length(unique(northeast.sites))
median.stack.14C.half <- function(x, sigma, sites, context, xmin, xmax){#
      intcal13 <- intcal.13#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(as.numeric(as.vector(x)), as.numeric(as.vector(sigma)), samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    small.frame <- data.frame(medians.all, sites, context)#
    colnames(small.frame) <- c("Median", "Site", "Context")#
    #medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    small.frame <- subset(small.frame, !(small.frame$Median > xmax | small.frame$Median < xmin))#
    return(small.frame)#
}
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=3300, xmin=1500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax= 3300, xmin= 1500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax= 3300, xmin= 1500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax= 3300, xmin= 1500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax= 3300, xmin= 1500)#
northwest.med.site.count <- length(unique(northwest.med$Site))#
meseta.med.site.count <- length(unique(meseta.med$Site))#
northeast.med.site.count <- length(unique(northeast.med$Site))#
southwest.med.site.count <- length(unique(southwest.med$Site))#
southeast.med.site.count <- length(unique(southeast.med$Site))
length(northwest.med$Median)
length(meseta.met$Median)
length(meseta.med$Median)
length(northeast.med$Median)
length(southwest.med$Median)
length(southeast.med$Median)
library(shiny)
runApp("~/GitHub/5i Results App")
runApp("~/GitHub/xrf-app")
#Erase everything that comes before#
rm(list = ls(all = TRUE))#
#
#packrat::init("~/Dropbox/4.2 ky event/Data Analysis/R Code/For Distribution/Neolithic")#
#
#Compatibility#
if(.Platform$OS.type=="windows") {#
  quartz<-function() windows()#
}#
#
###Load Packages#
library(TTR)#
library(ggplot2)#
library(gridExtra)#
library(scales)#
library(gtable)#
library(wq)#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape)#
library(sp)#
library(raster)#
library(rgdal)#
library(rgeos)#
library(maptools)#
library(sp)#
library(spatialEco)#
#
###Load Packages#
library(Bchron)#
library(plyr)#
library(bcp)#
#library(mgcv)#
library(reshape2)#
library(pbapply)#
library(xlsx)#
library(data.table)#
library(dplyr)#
library(akima)#
library(ggmap)#
library(ggthemes)#
#
###Download Packages (if needed) at http://www.bleedrake.com/Neolithic/Neolithic.zip#
#
###Load Data#
neolithic.bio <- read.csv(file="http://www.bleedrake.com/Neolithic/neolithic.csv")#
all.data <- read.csv(file="~/Dropbox/4.2 ky event/Radiocarbon Final/All Iberia/Just Dates-1-Table 1.csv")#
#
###Load Calibration Curves#
#intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")#
#####Collapse Dates#
collapse.the.dates.begin <- function(sites, biogeo, general, dates, sigma) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, biogeo, general, dates, sigma)#
    colnames(df) <- c("Site", "Biogeo_Uni", "St_Area_NE", "CYrBPunc", "Sigma")#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Biogeo_Uni))#
    df <- arrange(df, desc(St_Area_NE))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),4]-df[2:nrow(df), 4]))/((sqrt(df[2:nrow(df), 5]^2 + df[1:(nrow(df)-1),5]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),6], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(sites))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
#####Collapse Dates#
collapse.the.dates.new <- function(sites, region, context, dates, sigma, lat, long, datemin, datemax) {#
    n.t <- rep(100, length(sites))#
    df <- data.frame(sites, region, context, lat, long, as.numeric(dates), as.numeric(sigma))#
    colnames(df) <- c("Site", "Region", "Context", "Lat", "Long", "CYrBPunc", "Sigma")#
    df <- subset(df, df$CYrBPunc < datemax & df$CYrBPunc > datemin)#
    df <- arrange(df, desc(CYrBPunc))#
    df <- arrange(df, desc(Site))#
    df <- arrange(df, desc(Region))#
    df$Ttest <- c(#
    (abs(df[1:(nrow(df)-1),6]-df[2:nrow(df), 6]))/((sqrt(df[2:nrow(df), 7]^2 + df[1:(nrow(df)-1),7]^2)*sqrt(1/100))), NA)#
    df$pvalue <- c((2*pt(df[1:nrow(df),8], 100, lower=FALSE)))#
    df$Collapse <- rep("No", length(df$Site))#
    df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
    df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
    df <- as.data.frame(df)#
    df <- df[complete.cases(df),]#
    return(df)#
}#
neolithic.bio <- collapse.the.dates.begin(sites=neolithic.bio$Site, biogeo=neolithic.bio$Biogeo_Uni, general=neolithic.bio$St_Area_NE, dates=neolithic.bio$CYrBPunc, sigma=neolithic.bio$Sigma)#
#####Intersect 14C dates by region#
antonio.regions <- readOGR("/Users/lee/Dropbox/4.2 ky event/jwp paper/Event42_areasIberia", "Event42_areasIberia")#
antonio.p1 <- as(antonio.regions, "SpatialPolygons")#
antonio.p1@data$id = rownames(antonio.p1@data)#
#
small.frame <- data.frame(all.data$Region, all.data$Site, all.data$Site.Type, all.data$Site.Type.Simple, all.data$Context..phase..etc.., all.data$Lat.in.Dec, all.data$Long.in.Dec, all.data$Sample.Lab.Number, all.data$X14C.Yr.BP.uncal, all.data$Sigma)#
colnames(small.frame) <- c("Region", "Site", "Details", "Type", "Context", "Latitude", "Longitude", "LabNumber", "Date", "Sigma")#
small.frame <- small.frame[!(is.na(small.frame$Latitude) | small.frame$Latitude==""), ]#
small.frame <- small.frame[!(is.na(small.frame$Longitude) | small.frame$Longitude==""), ]#
small.frame$Region <- sub("^$", "0", small.frame$Region)#
small.frame$Site <- sub("^$", "0", small.frame$Site)#
small.frame$Type <- sub("^$", "0", small.frame$Type)#
small.frame$Context <- sub("^$", "0", small.frame$Context)#
small.frame$LabNumber <- sub("^$", "0", small.frame$LabNumber)#
small.frame$Date <- sub("^$", "0", small.frame$Date)#
small.frame$Sigma <- sub("^$", "0", small.frame$Sigma)#
iberia.points <- data.frame(small.frame)#
#
coordinates(iberia.points) = ~Longitude+Latitude#
proj4string(iberia.points) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0")#
#
iberia.points <- spTransform(iberia.points, CRS("+proj=utm +zone=30 +ellps=GRS80 +units=m +no_defs"))#
#
overlap <- over(iberia.points, antonio.regions)#
#
iberia.points@data$NewRegion <- overlap$Area_code#
iberia.point.var <- spTransform(iberia.points, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +towgs84=0,0,0"))#
iberia.data <- data.frame(iberia.points)#
iberia.data$Site <- as.character(iberia.data$Site)#
iberia.data2 <- data.frame(iberia.point.var)#
iberia.data2$NewRegion <- as.character(iberia.data2$NewRegion)#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SW", "Southwest")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="SE", "Southeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="Mediterranean", "Northeast")#
iberia.data2$NewRegion <- replace(iberia.data2$NewRegion, iberia.data2$NewRegion=="North", "Northwest")#
iberia.col <- collapse.the.dates.new(sites=iberia.data2$Site, region=iberia.data2$NewRegion, context=iberia.data2$Type, lat=iberia.data2$Latitude, long=iberia.data2$Longitude, dates=iberia.data2$Date, sigma=iberia.data2$Sigma, datemin=1000, datemax=14000)
##########################
###Generalized Regions####
##########################
#
northwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northwest")#
southwest.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southwest")#
southeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Southeast")#
meseta.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Meseta")#
northeast.14C <- subset(iberia.col$CYrBPunc, iberia.col$Region=="Northeast")#
northwest.sig<- subset(iberia.col$Sigma, iberia.col$Region=="Northwest")#
southwest.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southwest")#
southeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Southeast")#
meseta.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Meseta")#
northeast.sig <- subset(iberia.col$Sigma, iberia.col$Region=="Northeast")#
#
northwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northwest"))#
southwest.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southwest"))#
southeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Southeast"))#
meseta.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Meseta"))#
northeast.taxa <- as.vector(subset(iberia.col$Context, iberia.col$Region=="Northeast"))#
#
northwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northwest")#
southwest.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southwest")#
southeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Southeast")#
meseta.lat <- subset(iberia.col$Lat, iberia.col$Region=="Meseta")#
northeast.lat <- subset(iberia.col$Lat, iberia.col$Region=="Northeast")#
#
northwest.long <- subset(iberia.col$Long, iberia.col$Region=="Northwest")#
southwest.long <- subset(iberia.col$Long, iberia.col$Region=="Southwest")#
southeast.long <- subset(iberia.col$Long, iberia.col$Region=="Southeast")#
meseta.long <- subset(iberia.col$Long, iberia.col$Region=="Meseta")#
northeast.long <- subset(iberia.col$Long, iberia.col$Region=="Northeast")#
#
northwest.context <- subset(iberia.col$Context, iberia.col$Region=="Northwest")#
southwest.context <- subset(iberia.col$Context, iberia.col$Region=="Southwest")#
southeast.context <- subset(iberia.col$Context, iberia.col$Region=="Southeast")#
meseta.context <- subset(iberia.col$Context, iberia.col$Region=="Meseta")#
northeast.context <- subset(iberia.col$Context, iberia.col$Region=="Northeast")#
northwest.intcal <- rep("intcal13", length(northwest.14C))#
southwest.intcal <- rep("intcal13", length(southwest.14C))#
southeast.intcal <- rep("intcal13", length(southeast.14C))#
meseta.intcal <- rep("intcal13", length(meseta.14C))#
northeast.intcal <- rep("intcal13", length(northeast.14C))#
northwest.names <- rep("North", length(northwest.14C))#
southwest.names <- rep("Southwest", length(southwest.14C))#
southeast.names <- rep("Southeast", length(southeast.14C))#
meseta.names <- rep("Meseta", length(meseta.14C))#
northeast.names <- rep("Northeast", length(northeast.14C))#
northwest.sites<- subset(iberia.col$Site, iberia.col$Region=="Northwest")#
southwest.sites <- subset(iberia.col$Site, iberia.col$Region=="Southwest")#
southeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Southeast")#
meseta.sites <- subset(iberia.col$Site, iberia.col$Region=="Meseta")#
northeast.sites <- subset(iberia.col$Site, iberia.col$Region=="Northeast")#
northwest.site.count <- length(unique(as.vector(northwest.sites)))#
southwest.site.count <- length(unique(southwest.sites))#
southeast.site.count <- length(unique(southeast.sites))#
meseta.site.count <- length(unique(meseta.sites))#
northeast.site.count <- length(unique(northeast.sites))#
#
####################################################
#######Calibration & Confidence Band Function#######
####################################################
#
###Multicore apply function with status bar#
mcpblapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    if (!is.vector(X) || is.object(X))#
    X <- as.list(X)#
    B <- length(X)#
    if (!(interactive() && dopb() && B >= 1))#
    return(mclapply(X, FUN, ...#
    ))#
    pb <- startpb(0, B)#
    rval <- vector("list", B)#
    for (i in 1:B) {#
        rval[i] <- list(FUN(X[[i]], ...))#
        setpb(pb, i)#
    }#
    close(pb)#
    names(rval) <- names(X)#
    rval#
}#
#
mcpbsapply <- function (X, FUN, ..., mc.preschedule = TRUE, mc.set.seed = TRUE,#
mc.silent = FALSE, mc.cores = getOption("mc.cores", 2L),#
mc.cleanup = TRUE, mc.allow.recursive = TRUE, USE.NAMES = TRUE, simplify = TRUE)#
{#
    FUN <- match.fun(FUN)#
    answer <- mcpblapply(X = X, FUN = FUN,  ..., USE.NAMES = TRUE)#
    if (USE.NAMES && is.character(X) && is.null(names(answer)))#
    names(answer) <- X#
    if (!identical(simplify, FALSE) && length(answer))#
    simplify2array(answer, higher = (simplify == "array"))#
    else answer#
}#
#
mcreplicate <- function(n, expr, simplify = "array", mc.cores = getOption("mc.cores", 2L)) {#
#
mcpbsapply(integer(n), eval.parent(substitute(function(...) expr)), mc.cores = getOption("mc.cores", 2L),#
simplify = simplify)#
#
}#
conf.loess <- function(x, sigma, n, reps, xmin, xmax) { #
samp.intcal <- rep("intcal13", length(x))#
samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
samp.ages <- ldply(samp.slugdens, data.frame)#
res.by <- by(samp.ages$ageGrid, samp.ages$.id, median) #
res.t <- t(res.by)#
samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
time <- seq(xmin+5, xmax-5, 10)#
samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
samp.hist <- hist(samp.grid, breaks=length(time))#
samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
colnames(samp.hist) <- c("Age", "Counts", "Density")#
#samp.hist <- arrange(samp.all, desc(Age))#
#
makeloess <- function(x, n){#
time <- seq(xmin+5, xmax-5, 10)#
samp.age <- sample(x, size=n, replace=TRUE)#
samp.dist <- sapply(1:n, function(x) rnorm(500, samp.age, 85))#
samp.dist <- as.vector(samp.dist)#
samp.dist <- c(xmax, xmin, samp.dist)#
samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
samp.loess <- lowess(time, samp.date, f=0.15)#
samp.fitted <- samp.loess$y#
return(samp.fitted)#
}#
#
samp.replicate <- (replicate(reps, makeloess(res.t, n)))#
samp.replicate <- as.data.frame(samp.replicate)#
samp.replicate[is.na(samp.replicate)] <- 0#
samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
#
samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
#
samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
#samp.descriptive <- arrange(samp.descriptive, desc(Age))#
samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
names(samp.all)[names(samp.all)=="time"] <- "Age"#
names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
samp.all <- arrange(samp.all, desc(Age))#
return(samp.all)#
}#
#
d#
fmt <- function(){#
    function(x) format(x,nsmall = 4,scientific = FALSE)#
}#
###Traditional SCDPD#
BchronDensityCollapse <- function (dates, sigma, sites,  dfs = rep(100, length(dates)), numMix = 30,#
iterations = 10000, burn = 2000, thin = 8, updateAges = FALSE, collapse.dates=FALSE)#
{#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    pathToCalCurves = system.file("data",#
    package = "Bchron")#
    calCurves <- rep("intcal13", length(date.data$Date))#
    ages <- date.data$Date#
    ageSds <- date.data$Sigma#
    if (length(ages) != length(ageSds))#
    stop("ages and 1-sigma errors must be same length")#
    if (length(ages) != length(calCurves))#
    stop("ages and Calibration curves must be same length")#
    x = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, eps = 0, dfs = rep(100,#
    length(ages)))#
    xSmall = BchronCalibrate(ages = ages, ageSds = ageSds, calCurves = calCurves,#
    pathToCalCurves = pathToCalCurves, dfs = rep(100, length(ages)))#
    n = length(x)#
    thetaRange = range(xSmall[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, xSmall[[i]]$ageGrid))#
    offset = vector(length = n)#
    for (i in 1:n) {#
        offset[i] = ifelse(x[[i]]$calCurve == "normal", 61, 0)#
    }#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    clrInv = function(phi) {#
        return(exp(phi)/sum(exp(phi)))#
    }#
    J = numMix#
    mu = seq(thetaRange[1], thetaRange[2], length = numMix)#
    theta = vector(length = n)#
    for (j in 1:n) theta[j] = round(stats::rnorm(1, mean = x[[j]]$ageGrid[match(max(x[[j]]$densities),#
    x[[j]]$densities)], sd = ageSds[j]), 3)#
    phi = c(stats::runif(J - 1, -10, 10), 0)#
    p = as.numeric(clrInv(phi))#
    G = gbase(theta, mu)#
    remaining = (iterations - burn)/thin#
    thetaStore = matrix(ncol = length(theta), nrow = remaining)#
    pStore = matrix(ncol = J, nrow = remaining)#
    thetaAll = matrix(NA, ncol = n, nrow = iterations)#
    for (j in 1:n) thetaAll[, j] = sample(xSmall[[j]]$ageGrid,#
    size = iterations, prob = xSmall[[j]]$densities, replace = TRUE)#
    mu2 = mu#
    sigma2 = (mu[2] - mu[1])/2#
    my_dnorm = function(x) stats::dnorm(x, mean = mu2, sd = sigma2)#
    pb = utils::txtProgressBar(min = 1, max = iterations, style = 3,#
    width = 60, title = "Running BchronDensity")#
    for (i in 1:iterations) {#
        utils::setTxtProgressBar(pb, i)#
        if (i > burn & i%%thin == 0) {#
            ind = (i - burn)/thin#
            thetaStore[ind, ] = theta#
            pStore[ind, ] = p#
        }#
        if (updateAges) {#
            for (j in 1:n) {#
                thetaNew = round(stats::rnorm(1, theta[j], 0.5),#
                3)#
                thetaNewMatch = as.integer(thetaNew + offset[j]) +#
                1#
                thetaNewLogDens = max(log(x[[j]]$densities[thetaNewMatch]),#
                -1e+06)#
                priorNew.dens = sum(p * stats::dnorm(thetaNew,#
                mean = mu2, sd = sigma2))#
                thetaMatch = as.integer(theta[j] + offset[j]) +#
                1#
                thetaLogDens = max(log(x[[j]]$densities[thetaMatch]),#
                -1e+06)#
                priorDens = sum(p * stats::dnorm(theta[j], mean = mu2,#
                sd = sigma2))#
                logRtheta = thetaNewLogDens - thetaLogDens +#
                log(priorNew.dens) - log(priorDens)#
                if (stats::runif(1) < exp(logRtheta))#
                theta[j] = thetaNew#
            }#
        }#
        else {#
            theta = thetaAll[i, ]#
        }#
        for (j in 1:(J - 1)) {#
            phiNew = stats::rnorm(1, phi[j], 1)#
            phiAllNew = phi#
            phiAllNew[j] = phiNew#
            pNew = as.numeric(clrInv(phiAllNew))#
            phiNewLogDens = sum(log(G %*% pNew))#
            phiLogDens = sum(log(G %*% p))#
            logRphi = phiNewLogDens - phiLogDens + stats::dunif(phiNew,#
            -10, 10, log = TRUE) - stats::dunif(phi[j], -10,#
            10, log = TRUE)#
            if (stats::runif(1) < exp(logRphi)) {#
                phi[j] = phiNew#
                p = as.numeric(clrInv(phi))#
            }#
        }#
    }#
    output = list(theta = thetaStore, p = pStore, mu = mu, calAges = xSmall,#
    G = G)#
    class(output) = "BchronDensityRun"#
    return(output)#
}#
#
###Function to modify existing SCDPD from BchronDensity (modified from Bchron)#
SlugDens.t <- function (x, xmin, xmax)#
{#
    n = length(x$calAges)#
    thetaRange = range(x$calAges[[1]]$ageGrid)#
    for (i in 2:n) thetaRange = range(c(thetaRange, x$calAges[[i]]$ageGrid))#
    dateGrid = seq(xmin, xmax, length = 1000)#
    gauss <- function(x, mu, sig) {#
        u <- (x - mu)/sig#
        y <- exp(-u * u/2)#
        y#
    }#
    gbase <- function(x, mus) {#
        sig <- (mus[2] - mus[1])/2#
        G <- outer(x, mus, gauss, sig)#
        G#
    }#
    Gstar = gbase(dateGrid, x$mu)#
    dens = vector(length = length(dateGrid))#
    for (i in 1:nrow(x$p)) {#
        dens = dens + Gstar %*% x$p[i, ]#
    }#
    densFinal = dens/sum(dens)#
    slugbase <- data.frame(dateGrid,densFinal)#
    colnames(slugbase) <- c("Age", "Density")#
    slugbase <- arrange(slugbase, desc(Age))#
    return(slugbase)#
}#
#
SlugSig <- function(x, sigma, n, reps, xmin, xmax) {#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronDensity(x, sigma, samp.intcal, numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
    samp.hist <- SlugDens.t(samp.slugdens, xmin, xmax)#
    makeloess <- function(x, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.14C <- sample(x, size=n, replace=TRUE)#
        samp.sig <- sample(sigma, size=n, replace=TRUE)#
        samp.dist.n <- BchronDensity(samp.14C, samp.sig, rep("intcal13", n), numMix = 30, iterations=10000, burn=2000, thin=8, updateAges=FALSE)#
          samp.dist <- SlugDens.t(samp.dist.n, xmin, xmax)#
        samp.loess <- lowess(samp.dist$Age, samp.dist$Density, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(x, n)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(samp.hist$Age, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(samp.hist$Age, samp.hist$Density, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="samp.hist.Age"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
######Function to Generate Confidence Bands around SCDRD#
conf.cal.loess.old <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+1, xmax, 1)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.grid <- c(fill, samp.grid)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+1, xmax, 1)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(fill, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.cal.loess.trad <- function(dates, sigma, n, reps, sites, xmin, xmax, ..., cores = getOption("mc.cores", 2L), collapse.dates=FALSE) {#
    collapse.the.dates <- function(sites, dates, sigma) {#
        n.t <- rep(100, length(sites))#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        df <- arrange(df, desc(Date))#
        df <- arrange(df, desc(Sites))#
        df$Ttest <- c(#
        (abs(df[1:(nrow(df)-1),2]-df[2:nrow(df), 2]))/((sqrt(df[2:nrow(df), 3]^2 + df[1:(nrow(df)-1),3]^2)*sqrt(1/100))), NA)#
        df$pvalue <- c((2*pt(df[1:nrow(df),4], 100, lower=FALSE)))#
        df$Collapse <- rep("No", length(sites))#
        df <- transform(df, Collapse = ifelse(pvalue > 0.05, "Yes", Collapse))#
        df <- df[!(df$Collapse=="Yes" & df[1:(nrow(df)-1),1]==df[2:nrow(df), 1]),]#
        df <- as.data.frame(df)#
        df <- df[complete.cases(df),]#
        return(df)#
    }#
    uncollapse.the.dates <- function(sites, dates, sigma) {#
        df <- data.frame(sites, dates, sigma)#
        colnames(df) <- c("Sites", "Date", "Sigma")#
        return(df)#
    }#
    date.data <- if(isTRUE(collapse.dates)){#
        collapse.the.dates(sites, dates, sigma)#
    } else {#
        uncollapse.the.dates(sites, dates, sigma)#
    }#
    samp.intcal <- rep("intcal13", length(date.data$Date))#
    samp.slugdens <- BchronCalibrate(date.data$Date, date.data$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    res.by <- by(samp.ages$ageGrid, samp.ages$.id, median)#
    res.t <- t(res.by)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(dates, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        n.s <- length(dates)#
        samp.order <- sample(n.s, size=n, replace=TRUE)#
        samp.dist.n <- samp.slugdens[samp.order]#
        temp.ages <- ldply(samp.dist.n, data.frame)#
        temp.age.grid <- c(temp.ages$ageGrid, fill)#
        temp.grid <- temp.age.grid[temp.age.grid < xmax & samp.grid > xmin]#
        samp.dist <- c(fill, temp.grid)#
        samp.dist <- as.vector(samp.dist)#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
    }#
    samp.replicate <- (mcreplicate(reps, makeloess(dates, n)))#
    samp.replicate.dat <- as.data.frame(samp.replicate)#
    samp.replicate.dat[is.na(samp.replicate.dat)] <- 0#
    samp.replicated <- sweep(samp.replicate.dat,2,colSums(samp.replicate.dat),`/`)#
    samp.results.replicated.m <- transform(samp.replicated, MEAN=apply(X=samp.replicated, MARGIN=1, FUN=mean, na.rm = TRUE))#
    samp.results.replicated.s <- transform(samp.replicated, SD=apply(X=samp.replicated, MARGIN=1, FUN=sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicated.m$MEAN, samp.results.replicated.s$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
conf.loess <- function(dates, sigma, sites, n, reps, xmin, xmax) {#
    samp.intcal <- rep("intcal13", length(dates))#
    samp.slugdens <- BchronCalibrate(dates, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    small.age.frame <- data.frame(samp.ages$.id, as.vector(samp.ages$ageGrid), as.vector(samp.ages$ageSds))#
    colnames(small.age.frame) <- c("Id", "ageGrid", "ageSDS")#
    samp.test <- aggregate(small.age.frame[,2:3], by=list(small.age.frame$Id), FUN=median)#
    colnames(samp.test) <- c("Id", "Mean", "SD")#
    samp.test$Min <- samp.test$Mean-samp.test$SD#
    samp.test$Max <- samp.test$Mean+samp.test$SD#
    samp.age.grid <- c(samp.ages$ageGrid, xmin, xmax)#
    samp.age.grid <- subset(samp.age.grid, !(xmin > samp.age.grid | samp.age.grid > xmax))#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    samp.hist <- hist(c(samp.grid, xmin, xmax), breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    #samp.hist <- arrange(samp.all, desc(Age))#
    makeloess <- function(a.frame, n){#
        time <- seq(xmin+5, xmax-5, 10)#
        samp.id <- as.vector(sample(as.vector(a.frame$Id), size=n, replace=TRUE))#
        t.frame <- data.frame(t(a.frame))#
        colnames(t.frame) <- a.frame$Id#
        s.t.frame <- t.frame[,samp.id]#
        f.frame <- data.frame(t(s.t.frame))#
        #f.frame <- data.table(f.frame)#
        small.frame <- data.frame(f.frame$Id, f.frame$Min, f.frame$Max)#
        colnames(small.frame) <- c("Id", "Min", "Max")#
        small.list <- split(as.vector(small.frame[,2:3]), f=small.frame$Id)#
        small.list <- lapply(small.list, function(x) as.vector(x[1,]))#
        seq.gen <- function(a.frame) {#
            a.frame <- as.data.frame(a.frame)#
            at.vector <- as.numeric(as.vector(as.data.frame(t(a.frame))[,1]))#
            sequence <- seq(from=at.vector[1], to=at.vector[2], by=1)#
            return(sequence)#
        }#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- ldply(all.seq, data.frame)[,2]#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- as.vector(tapply(samp.dist, cut(samp.dist, length(time)), length))#
        all.seq <- lapply(small.list, function(x) seq.gen(x))#
        all.dates <- as.vector(ldply(all.seq, data.frame)[,2])#
        samp.dist <- subset(all.dates, !(xmin > all.dates | all.dates > xmax))#
        samp.dist <- c(xmax, xmin, samp.dist)#
        samp.date <- tapply(samp.dist, cut(samp.dist, length(time)), length)#
        samp.loess <- lowess(time, samp.date, f=0.15)#
        samp.fitted <- samp.loess$y#
        return(samp.fitted)#
#
    }#
    samp.replicate <- (pbreplicate(reps, makeloess(samp.test, reps)))#
    samp.replicate <- as.data.frame(samp.replicate)#
    samp.replicate[is.na(samp.replicate)] <- 0#
    samp.replicate <- sweep(samp.replicate,2,colSums(samp.replicate),`/`)#
    samp.results.replicate <- transform(samp.replicate, MEAN=apply(samp.replicate,1, mean, na.rm = TRUE))#
    samp.results.replicate <- transform(samp.results.replicate, SD=apply(samp.results.replicate,1, sd, na.rm = TRUE))#
    samp.descriptive <- data.frame(time, samp.results.replicate$MEAN, samp.results.replicate$SD)#
    colnames(samp.descriptive) <- c("Age", "Mean", "SD")#
    #samp.descriptive <- arrange(samp.descriptive, desc(Age))#
    samp.all <- data.frame(time, samp.hist$Density, samp.hist$Counts, samp.descriptive$Mean, samp.descriptive$SD, samp.replicate)#
    names(samp.all)[names(samp.all)=="time"] <- "Age"#
    names(samp.all)[names(samp.all)=="samp.descriptive.Mean"] <- "Mean"#
    names(samp.all)[names(samp.all)=="samp.descriptive.SD"] <- "SD"#
    names(samp.all)[names(samp.all)=="samp.hist.Density"] <- "Density"#
    names(samp.all)[names(samp.all)=="samp.hist.Counts"] <- "Counts"#
    samp.all <- arrange(samp.all, desc(Age))#
    return(samp.all)#
}#
stack.14C.taxa.old <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
stack.14C.taxa <- function(date, sigma, xmin, xmax, lat, long, taxa){#
    date <- c(date, 49000)#
    sigma <- c(sigma, 4900)#
    lat <- c(lat, 0)#
    long <- c(long, 0)#
    taxa <- c(taxa, "blank")#
    date.frame <- data.frame(date, sigma, lat, long, taxa)#
    names(date.frame) <- c("Date", "Sigma", "Lat", "Long", "Taxa")#
    date.frame <- date.frame[complete.cases(date.frame),]#
    date.sub <- subset(date.frame, (xmin-500) < Date & Date < (xmax + 500))#
    ids.cus = paste("date", 1:length(date.sub$Date), sep = "")#
    coord.sub <- data.frame(ids.cus, date.sub$Lat, date.sub$Long, date.sub$Taxa)#
    names(coord.sub) <- c(".id", "Lat", "Long", "Taxa")#
    samp.intcal <- rep("intcal13", length(date.sub$Date))#
    samp.slugdens <- BchronCalibrate(date.sub$Date, date.sub$Sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.mean <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, mean))#
    samp.sd <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, sd))#
    samp.frame <- data.frame(samp.mean, samp.sd)#
    colnames(samp.frame) <- c("Mean", "Sd")#
    samp.frame$Min <- samp.frame$Mean-date.sub$Sigma*2#
    samp.frame$Max <- samp.frame$Mean+date.sub$Sigma*2#
    samp.frame$Lat <- coord.sub$Lat#
    samp.frame$Long <- coord.sub$Long#
    samp.frame$Taxa <- coord.sub$Taxa#
    samp.frame <- data.table(samp.frame)#
    lat.frame <- samp.frame[, list(Lat=Lat, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    long.frame <- samp.frame[, list(Long=Long, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    taxa.frame <- samp.frame[, list(Taxa=Taxa, ageGrid = seq(from=trunc(Min), to=trunc(Max))), by = 1:nrow(samp.frame)]#
    fin.frame <- data.frame(taxa.frame$Taxa, lat.frame$Lat, long.frame$Long, lat.frame$ageGrid)#
    colnames(fin.frame) <- c("Taxa", "Lat", "Long", "ageGrid")#
    return(fin.frame)#
}#
#######
stack.14C <- function(x, sigma, xmin, xmax, taxa){#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(x, sigma, samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    fill <- seq(xmin, xmax, 1)#
    samp.age.grid <- c(samp.ages$ageGrid, fill)#
    samp.grid <- sort(samp.age.grid, decreasing=TRUE)#
    samp.grid <- samp.grid[samp.grid < xmax & samp.grid > xmin]#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist <- hist(samp.grid, breaks=length(time))#
    samp.hist <- data.frame(time, samp.hist$counts, samp.hist$counts/sum(samp.hist$counts))#
    colnames(samp.hist) <- c("Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
taphonomic.correct <- function(stack.14C.data) {#
    df <- stack.14C.data#
    n.t <- 5.726442*(10^6)*(df$Age + 2176.4)^-1.3925309#
    lambda <- 1.3925309/(2176.4+df$Age)*100#
    lambda.r <- 1-lambda#
    n.t.relative <- n.t/128.8192#
    df$Counts.Corrected <-df$Counts/n.t.relative#
    count.mod.sum <- sum(df$Counts.Corrected)#
    df$Density.Corrected <- df$Counts.Corrected/count.mod.sum#
    return(df)#
}#
criterion.data.null <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !stack.14C.taxa.object$Taxa==criteria.names)#
    ageGrids <- c(temp.df.1$ageGrid, temp.df.2$ageGrid)#
    Taxa <- c(as.vector(temp.df.1$Taxa), rep("Other", length(temp.df.2$ageGrid)))#
    temp.df <- data.frame(ageGrids, Taxa)#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    return(corrected.samp.hist)#
}#
criterion.data.old <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    samp.hist <- data.frame(samp.mids.df[1], samp.mids.df[2], samp.counts.df[2], samp.density.df[2])#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, corrected.samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)), even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    colnames(temp.df) <- c("ageGrid", "Taxa")#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    colnames(temp.df.alt) <- c("ageGrid", "Taxa")#
    temp.list <- split(temp.df$ageGrid, f=temp.df$Taxa)#
    temp.list <- rapply(temp.list, f=sort, how="list", decreasing=TRUE)#
    time <- seq(xmin+5, xmax-5, 10)#
    samp.hist.list <- rapply(temp.list, f=hist, how="list", breaks=length(time))#
    samp.mids <- sapply(samp.hist.list, "[[", 4)#
    samp.counts <- sapply(samp.hist.list, "[[", 2)#
    samp.density <- sapply(samp.hist.list, "[[", 3)#
    samp.mids.df <- ldply(samp.mids, data.frame)#
    samp.counts.df <- ldply(samp.counts, data.frame)#
    samp.density.df <- ldply(samp.density, data.frame)#
    temp.list.alt <- split(temp.df.alt$ageGrid, f=temp.df.alt$Taxa)#
    temp.list.alt <- rapply(temp.list.alt, f=sort, how="list", decreasing=TRUE)#
    samp.hist.list.alt <- rapply(temp.list.alt, f=hist, how="list", breaks=length(time))#
    samp.mids.alt <- sapply(samp.hist.list.alt, "[[", 4)#
    samp.counts.alt <- sapply(samp.hist.list.alt, "[[", 2)#
    samp.density.alt <- sapply(samp.hist.list.alt, "[[", 3)#
    samp.mids.df.alt <- ldply(samp.mids.alt, data.frame)#
    samp.counts.df.alt <- ldply(samp.counts.alt, data.frame)#
    samp.density.df.alt <- ldply(samp.density.alt, data.frame)#
    hist.alt <- hist(temp.df.alt$ageGrid, breaks=length(time))#
    samp.mids.alt <- hist.alt$mids#
    samp.counts.alt <- hist.alt$counts#
    count.sum <- sum(samp.counts.alt)#
    samp.density.alt <- hist.alt$density#
    samp.names.alt <- rep("Total", length(samp.mids.alt))#
    samp.hist <- data.frame(c(samp.mids.df[,1], samp.names.alt), as.numeric(as.vector(c(samp.mids.df[,2], samp.mids.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt))), as.numeric(as.vector(c(samp.counts.df[,2], samp.counts.alt)))/count.sum)#
    colnames(samp.hist) <- c("Taxa", "Age", "Counts", "Density")#
    corrected.samp.hist <- taphonomic.correct(samp.hist)#
    even.more.corrected.samp.hist <- as.data.frame(xtabs(Counts~Age+Taxa, samp.hist))#
    final.samp.hist <- data.frame(abs(1950-as.numeric(as.vector(even.more.corrected.samp.hist$Age))), as.numeric(as.vector(even.more.corrected.samp.hist$Freq)),#
        as.numeric(as.vector(even.more.corrected.samp.hist$Freq))/count.sum,#
        even.more.corrected.samp.hist$Taxa)#
    colnames(final.samp.hist) <- c("Age", "Counts", "Density", "Taxa")#
    return(final.samp.hist)#
}#
criterion.data.test <- function(stack.14C.taxa.object, criteria.names, xmin, xmax) {#
    temp.df.1 <- subset(stack.14C.taxa.object, stack.14C.taxa.object$Taxa==criteria.names)#
    temp.df.2 <- subset(stack.14C.taxa.object, !(stack.14C.taxa.object$Taxa==criteria.names))#
    temp.df <- data.frame(temp.df.1$ageGrid, as.vector(temp.df.1$Taxa))#
    temp.df.alt <- data.frame(temp.df.2$ageGrid, rep("Total", length(temp.df.2$ageGrid)))#
    df <- data.frame(c(temp.df.1$ageGrid, temp.df.2$ageGrid), c(as.vector(temp.df.1$Taxa), rep("Total", length(temp.df.2$ageGrid))))#
    colnames(df) <- c("ageGrid", "Taxa")#
    return(df)#
}#
median.stack.14C.half <- function(x, sigma, sites, context, xmin, xmax){#
      intcal13 <- intcal.13#
    samp.intcal <- rep("intcal13", length(x))#
    samp.slugdens <- BchronCalibrate(as.numeric(as.vector(x)), as.numeric(as.vector(sigma)), samp.intcal)#
    samp.ages <- ldply(samp.slugdens, data.frame)#
    samp.median <- data.frame(tapply(samp.ages$ageGrid, samp.ages$.id, median))#
    medians.all <-as.vector(samp.median[,1])#
    small.frame <- data.frame(medians.all, sites, context)#
    colnames(small.frame) <- c("Median", "Site", "Context")#
    #medians <- medians.all[medians.all < xmax & medians.all > xmin]#
    small.frame <- subset(small.frame, !(small.frame$Median > xmax | small.frame$Median < xmin))#
    return(small.frame)#
}
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
intcal.13 <- read.csv(file="http://www.bleedrake.com/Neolithic/intcal13.csv")
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
table(southeast.med$Context)
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=3300, xmin=1500)
table(southeast.med$Context)
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
write.table(southeast.med, file="~/southeastmed.csv", sep=",")
chaco.light.quant <- read.csv(file="/Users/lee/Dropbox/Documents/Chaco Geochem/Chaco Arroyo Z Light/Arroyo Z Light Cal-Table 1.csv")
fe.plot <- ggplot(chaco.light.quant, aes(Ti, Fe)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Ti (%)") +#
scale_y_continuous("Fe (%)") +#
theme_bw()
fe.plot
lm_eqn = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
        eq <- substitute(italic(C)[i] == a + b %.% italic(I)[i]*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}#
#
lm_eqn_val = function(m) {#
    l <- list(a = format(coef(m)[1], digits = 2),#
    b = format(abs(coef(m)[2]), digits = 2),#
    r2 = format(summary(m)$r.squared, digits = 3));#
        eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)^2~"="~r2,l)#
    as.character(as.expression(eq));#
}
fe.plot <- ggplot(chaco.light.quant, aes(Ti, Fe)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Ti (%)") +#
scale_y_continuous("Fe (%)") +#
annotate("text", label=lm_eqn_val(lm(Fe~Ti, chaco.light.quant)), x=1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_bw()
fe.plot
fe.plot <- ggplot(chaco.light.quant, aes(Ti, Fe)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Ti (%)") +#
scale_y_continuous("Fe (%)") +#
annotate("text", label=lm_eqn_val(lm(Fe~Ti, chaco.light.quant)), x=0.05, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_bw()
fe.plot
fe.plot <- ggplot(chaco.light.quant, aes(Ti, Fe)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Ti (%)") +#
scale_y_continuous("Fe (%)") +#
annotate("text", label=lm_eqn_val(lm(Fe~Ti, chaco.light.quant)), x=0.1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_bw()
fe.plot
al.k.plot <- ggplot(chaco.light.quant, aes(Al, K)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Al (%)") +#
scale_y_continuous("K (%)") +#
annotate("text", label=lm_eqn_val(lm(Al~K, chaco.light.quant)), x=0.1, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_bw()
al.k.plot
al.k.plot <- ggplot(chaco.light.quant, aes(Al, K)) +#
geom_point() +#
stat_smooth(method="lm") +#
scale_x_continuous("Al (%)") +#
scale_y_continuous("K (%)") +#
annotate("text", label=lm_eqn_val(lm(Al~K, chaco.light.quant)), x=2.75, y=Inf, hjust=0, vjust=1, parse=TRUE)+#
theme_bw()
al.k.plot
northwest.med <- median.stack.14C.half(x=northwest.14C, sigma=northwest.sig, context=northwest.context, sites=northwest.sites, xmax=5500, xmin=500)#
meseta.med <- median.stack.14C.half(x=meseta.14C, sigma=meseta.sig, context=meseta.context, sites=meseta.sites, xmax=5500, xmin=500)#
northeast.med <- median.stack.14C.half(x=northeast.14C, sigma=northeast.sig, context=northeast.context, sites=northeast.sites, xmax=5500, xmin=500)#
southwest.med <- median.stack.14C.half(x=southwest.14C, sigma=southwest.sig, context=southwest.context, sites=southwest.sites, xmax=5500, xmin=500)#
southeast.med <- median.stack.14C.half(x=southeast.14C, sigma=southeast.sig, context=southeast.context, sites=southeast.sites, xmax=5500, xmin=500)
library(xlsx)
write.xlsx(northwest.med, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/auditeddates.xlsx", sheetName="Northwest")#
write.xlsx(meseta.med, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/auditeddates.xlsx", sheetName="Meseta", append=TRUE)#
write.xlsx(northeast.med, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/auditeddates.xlsx", sheetName="Northeast", append=TRUE)#
write.xlsx(southwest.med, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/auditeddates.xlsx", sheetName="Southwest", append=TRUE)#
write.xlsx(southeast.med, file="/Users/lee/Dropbox/4.2 ky event/jwp paper/SCDRD/auditeddates.xlsx", sheetName="Southeast", append=TRUE)
library(rgl)
bg3d("white") # if you want a black background#
rgl.spheres(0, 0, 0, texture="~/Dropbox/Documents/Anacom/Maps/Raw/Silicon.png", lit=FALSE)
bg3d("white") # if you want a black background#
rgl.spheres(0, 0, 0, texture="~/Dropbox/Documents/Anacom/Maps/Raw/Phosphorous.png", lit=FALSE)
library(rgl)
bg3d("white") # if you want a black background#
rgl.spheres(0, 0, 0, texture="~/Dropbox/Documents/Anacom/Maps/Raw/Silicon.png", lit=FALSE)
bg3d("white") # if you want a black background#
rgl.spheres(0, 0, 0, texture="~/Dropbox/Documents/Anacom/Maps/Raw/Phosphorous.png", lit=FALSE)
bg3d("white") # if you want a black background#
rgl.spheres(0, 0, 0, texture="~/Dropbox/Documents/Anacom/Maps/Raw/Silicon.png", lit=FALSE)
library(shiny)
runApp("~/GitHub/xrf-app")
